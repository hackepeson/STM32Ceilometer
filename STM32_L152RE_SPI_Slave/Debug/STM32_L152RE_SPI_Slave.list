
STM32_L152RE_SPI_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003168  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003300  08003300  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003300  08003300  00013300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003308  08003308  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003308  08003308  00013308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800330c  0800330c  0001330c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000070  08003380  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08003380  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fac  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000182b  00000000  00000000  00028045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  00029870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  0002a100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b8b  00000000  00000000  0002a8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009510  00000000  00000000  00040483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008673e  00000000  00000000  00049993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d00d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a0  00000000  00000000  000d0124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	0800328c 	.word	0x0800328c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	0800328c 	.word	0x0800328c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b094      	sub	sp, #80	; 0x50
 8000498:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 fac2 	bl	8000a22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f857 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f000 f8ff 	bl	80006a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004a6:	f000 f8d3 	bl	8000650 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80004aa:	f000 f89f 	bl	80005ec <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_StatusTypeDef spi_error = HAL_OK;
 80004ae:	2300      	movs	r3, #0
 80004b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	//spi_error = HAL_SPI_TransmitReceive_DMA(&hspi2, (uint8_t*) spi_tx_data,	(uint8_t*) spi_rx_data, sizeof(spi_tx_data) / 2);
	//spi_error = HAL_SPI_TransmitReceive_IT(&hspi2,(uint8_t*)spi_tx_data, (uint8_t*)spi_rx_data,2/*sizeof(spi_tx_data)/2*/);
	//static uint16_t spi_tx_data[2000] = {12};
	//static uint16_t spi_rx_data[2000];
	char txBuf[64] = { 0 };
 80004b4:	2300      	movs	r3, #0
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	f107 0308 	add.w	r3, r7, #8
 80004bc:	223c      	movs	r2, #60	; 0x3c
 80004be:	2100      	movs	r1, #0
 80004c0:	4618      	mov	r0, r3
 80004c2:	f002 fa61 	bl	8002988 <memset>
	while (1) {

		 spi_error = HAL_SPI_TransmitReceive(&hspi2,(uint8_t*)spi_tx_data, (uint8_t*)spi_rx_data,sizeof(spi_tx_data)/2,5000);
 80004c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2364      	movs	r3, #100	; 0x64
 80004ce:	4a1b      	ldr	r2, [pc, #108]	; (800053c <main+0xa8>)
 80004d0:	491b      	ldr	r1, [pc, #108]	; (8000540 <main+0xac>)
 80004d2:	481c      	ldr	r0, [pc, #112]	; (8000544 <main+0xb0>)
 80004d4:	f001 fc89 	bl	8001dea <HAL_SPI_TransmitReceive>
 80004d8:	4603      	mov	r3, r0
 80004da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		 if ((spi_error == HAL_OK) && (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_READY) && (hspi2.ErrorCode == HAL_SPI_ERROR_NONE))
 80004de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d1ef      	bne.n	80004c6 <main+0x32>
 80004e6:	4817      	ldr	r0, [pc, #92]	; (8000544 <main+0xb0>)
 80004e8:	f001 ff2b 	bl	8002342 <HAL_SPI_GetState>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d1e9      	bne.n	80004c6 <main+0x32>
 80004f2:	4b14      	ldr	r3, [pc, #80]	; (8000544 <main+0xb0>)
 80004f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d1e5      	bne.n	80004c6 <main+0x32>
		 {
		 spi_tx_data[0]++;
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <main+0xac>)
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	3301      	adds	r3, #1
 8000500:	b29a      	uxth	r2, r3
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <main+0xac>)
 8000504:	801a      	strh	r2, [r3, #0]
		 spi_tx_data[1] = spi_tx_data[0] + 1;
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <main+0xac>)
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	3301      	adds	r3, #1
 800050c:	b29a      	uxth	r2, r3
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <main+0xac>)
 8000510:	805a      	strh	r2, [r3, #2]

		 sprintf(txBuf, "%x\n", spi_rx_data[0]);
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <main+0xa8>)
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	461a      	mov	r2, r3
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	490b      	ldr	r1, [pc, #44]	; (8000548 <main+0xb4>)
 800051c:	4618      	mov	r0, r3
 800051e:	f002 fa3b 	bl	8002998 <siprintf>
		 HAL_UART_Transmit(&huart2, (uint8_t*)txBuf, strlen(txBuf), 10);
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff fe29 	bl	800017c <strlen>
 800052a:	4603      	mov	r3, r0
 800052c:	b29a      	uxth	r2, r3
 800052e:	1d39      	adds	r1, r7, #4
 8000530:	230a      	movs	r3, #10
 8000532:	4806      	ldr	r0, [pc, #24]	; (800054c <main+0xb8>)
 8000534:	f002 f83d 	bl	80025b2 <HAL_UART_Transmit>
		 spi_error = HAL_SPI_TransmitReceive(&hspi2,(uint8_t*)spi_tx_data, (uint8_t*)spi_rx_data,sizeof(spi_tx_data)/2,5000);
 8000538:	e7c5      	b.n	80004c6 <main+0x32>
 800053a:	bf00      	nop
 800053c:	200001f0 	.word	0x200001f0
 8000540:	20000128 	.word	0x20000128
 8000544:	2000008c 	.word	0x2000008c
 8000548:	080032a4 	.word	0x080032a4
 800054c:	200000e4 	.word	0x200000e4

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b092      	sub	sp, #72	; 0x48
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	2234      	movs	r2, #52	; 0x34
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f002 fa12 	bl	8002988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	463b      	mov	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000572:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <SystemClock_Config+0x98>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800057a:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <SystemClock_Config+0x98>)
 800057c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000580:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000582:	2302      	movs	r3, #2
 8000584:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000586:	2301      	movs	r3, #1
 8000588:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058a:	2310      	movs	r3, #16
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000592:	2300      	movs	r3, #0
 8000594:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000596:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800059c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80005a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fda0 	bl	80010ec <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005b2:	f000 f8dd 	bl	8000770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	2303      	movs	r3, #3
 80005bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ca:	463b      	mov	r3, r7
 80005cc:	2101      	movs	r1, #1
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 f8bc 	bl	800174c <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005da:	f000 f8c9 	bl	8000770 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3748      	adds	r7, #72	; 0x48
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_SPI2_Init+0x5c>)
 80005f2:	4a16      	ldr	r2, [pc, #88]	; (800064c <MX_SPI2_Init+0x60>)
 80005f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_SPI2_Init+0x5c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_SPI2_Init+0x5c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_SPI2_Init+0x5c>)
 8000604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000608:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_SPI2_Init+0x5c>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <MX_SPI2_Init+0x5c>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_SPI2_Init+0x5c>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_SPI2_Init+0x5c>)
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_SPI2_Init+0x5c>)
 8000624:	2200      	movs	r2, #0
 8000626:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_SPI2_Init+0x5c>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_SPI2_Init+0x5c>)
 8000630:	220a      	movs	r2, #10
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_SPI2_Init+0x5c>)
 8000636:	f001 fb4f 	bl	8001cd8 <HAL_SPI_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 8000640:	f000 f896 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000008c 	.word	0x2000008c
 800064c:	40003800 	.word	0x40003800

08000650 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <MX_USART2_UART_Init+0x50>)
 8000658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_USART2_UART_Init+0x4c>)
 800065c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_USART2_UART_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART2_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000688:	f001 ff46 	bl	8002518 <HAL_UART_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000692:	f000 f86d 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200000e4 	.word	0x200000e4
 80006a0:	40004400 	.word	0x40004400

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <MX_GPIO_Init+0xc0>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4a29      	ldr	r2, [pc, #164]	; (8000764 <MX_GPIO_Init+0xc0>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	61d3      	str	r3, [r2, #28]
 80006c6:	4b27      	ldr	r3, [pc, #156]	; (8000764 <MX_GPIO_Init+0xc0>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	4b24      	ldr	r3, [pc, #144]	; (8000764 <MX_GPIO_Init+0xc0>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a23      	ldr	r2, [pc, #140]	; (8000764 <MX_GPIO_Init+0xc0>)
 80006d8:	f043 0320 	orr.w	r3, r3, #32
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <MX_GPIO_Init+0xc0>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 0320 	and.w	r3, r3, #32
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MX_GPIO_Init+0xc0>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	4a1d      	ldr	r2, [pc, #116]	; (8000764 <MX_GPIO_Init+0xc0>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	61d3      	str	r3, [r2, #28]
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_GPIO_Init+0xc0>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_GPIO_Init+0xc0>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a17      	ldr	r2, [pc, #92]	; (8000764 <MX_GPIO_Init+0xc0>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_GPIO_Init+0xc0>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2120      	movs	r1, #32
 800071e:	4812      	ldr	r0, [pc, #72]	; (8000768 <MX_GPIO_Init+0xc4>)
 8000720:	f000 fccc 	bl	80010bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800072a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	480c      	ldr	r0, [pc, #48]	; (800076c <MX_GPIO_Init+0xc8>)
 800073c:	f000 fb2e 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000740:	2320      	movs	r3, #32
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_GPIO_Init+0xc4>)
 8000758:	f000 fb20 	bl	8000d9c <HAL_GPIO_Init>

}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	; 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000
 800076c:	40020800 	.word	0x40020800

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000778:	e7fe      	b.n	8000778 <Error_Handler+0x8>
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <HAL_MspInit+0x5c>)
 8000784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000786:	4a14      	ldr	r2, [pc, #80]	; (80007d8 <HAL_MspInit+0x5c>)
 8000788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800078c:	6253      	str	r3, [r2, #36]	; 0x24
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_MspInit+0x5c>)
 8000790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <HAL_MspInit+0x5c>)
 800079c:	6a1b      	ldr	r3, [r3, #32]
 800079e:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <HAL_MspInit+0x5c>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6213      	str	r3, [r2, #32]
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <HAL_MspInit+0x5c>)
 80007a8:	6a1b      	ldr	r3, [r3, #32]
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_MspInit+0x5c>)
 80007b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <HAL_MspInit+0x5c>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	6253      	str	r3, [r2, #36]	; 0x24
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_MspInit+0x5c>)
 80007c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ca:	2007      	movs	r0, #7
 80007cc:	f000 fa64 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800

080007dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <HAL_SPI_MspInit+0x8c>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d130      	bne.n	8000860 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <HAL_SPI_MspInit+0x90>)
 8000800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000802:	4a1a      	ldr	r2, [pc, #104]	; (800086c <HAL_SPI_MspInit+0x90>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000808:	6253      	str	r3, [r2, #36]	; 0x24
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <HAL_SPI_MspInit+0x90>)
 800080c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_SPI_MspInit+0x90>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <HAL_SPI_MspInit+0x90>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	61d3      	str	r3, [r2, #28]
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_SPI_MspInit+0x90>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800082e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000840:	2305      	movs	r3, #5
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <HAL_SPI_MspInit+0x94>)
 800084c:	f000 faa6 	bl	8000d9c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	2024      	movs	r0, #36	; 0x24
 8000856:	f000 fa2a 	bl	8000cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800085a:	2024      	movs	r0, #36	; 0x24
 800085c:	f000 fa43 	bl	8000ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000860:	bf00      	nop
 8000862:	3728      	adds	r7, #40	; 0x28
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40003800 	.word	0x40003800
 800086c:	40023800 	.word	0x40023800
 8000870:	40020400 	.word	0x40020400

08000874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <HAL_UART_MspInit+0x7c>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d127      	bne.n	80008e6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_UART_MspInit+0x80>)
 8000898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089a:	4a16      	ldr	r2, [pc, #88]	; (80008f4 <HAL_UART_MspInit+0x80>)
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	6253      	str	r3, [r2, #36]	; 0x24
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_UART_MspInit+0x80>)
 80008a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_UART_MspInit+0x80>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <HAL_UART_MspInit+0x80>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	61d3      	str	r3, [r2, #28]
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_UART_MspInit+0x80>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008c6:	230c      	movs	r3, #12
 80008c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d6:	2307      	movs	r3, #7
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <HAL_UART_MspInit+0x84>)
 80008e2:	f000 fa5b 	bl	8000d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e6:	bf00      	nop
 80008e8:	3728      	adds	r7, #40	; 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40004400 	.word	0x40004400
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <NMI_Handler+0x4>

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler+0x4>

0800090e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <UsageFault_Handler+0x4>

0800091a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr

08000926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr

08000932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr

0800093e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000942:	f000 f8c1 	bl	8000ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <SPI2_IRQHandler+0x10>)
 8000952:	f001 fbed 	bl	8002130 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000008c 	.word	0x2000008c

08000960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000968:	4a14      	ldr	r2, [pc, #80]	; (80009bc <_sbrk+0x5c>)
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <_sbrk+0x60>)
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d102      	bne.n	8000982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <_sbrk+0x64>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <_sbrk+0x68>)
 8000980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <_sbrk+0x64>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	429a      	cmp	r2, r3
 800098e:	d207      	bcs.n	80009a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000990:	f001 ffd0 	bl	8002934 <__errno>
 8000994:	4603      	mov	r3, r0
 8000996:	220c      	movs	r2, #12
 8000998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	e009      	b.n	80009b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <_sbrk+0x64>)
 80009b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009b2:	68fb      	ldr	r3, [r7, #12]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20014000 	.word	0x20014000
 80009c0:	00000400 	.word	0x00000400
 80009c4:	200002b8 	.word	0x200002b8
 80009c8:	200002d0 	.word	0x200002d0

080009cc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d8:	480c      	ldr	r0, [pc, #48]	; (8000a0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009da:	490d      	ldr	r1, [pc, #52]	; (8000a10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009dc:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e0:	e002      	b.n	80009e8 <LoopCopyDataInit>

080009e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e6:	3304      	adds	r3, #4

080009e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ec:	d3f9      	bcc.n	80009e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009f0:	4c0a      	ldr	r4, [pc, #40]	; (8000a1c <LoopFillZerobss+0x22>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f4:	e001      	b.n	80009fa <LoopFillZerobss>

080009f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f8:	3204      	adds	r2, #4

080009fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009fc:	d3fb      	bcc.n	80009f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009fe:	f7ff ffe5 	bl	80009cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a02:	f001 ff9d 	bl	8002940 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a06:	f7ff fd45 	bl	8000494 <main>
  bx lr
 8000a0a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a14:	08003310 	.word	0x08003310
  ldr r2, =_sbss
 8000a18:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a1c:	200002d0 	.word	0x200002d0

08000a20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC1_IRQHandler>

08000a22 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f000 f933 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 f80e 	bl	8000a54 <HAL_InitTick>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d002      	beq.n	8000a44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	71fb      	strb	r3, [r7, #7]
 8000a42:	e001      	b.n	8000a48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a44:	f7ff fe9a 	bl	800077c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_InitTick+0x68>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d022      	beq.n	8000aae <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_InitTick+0x6c>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <HAL_InitTick+0x68>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a74:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 f940 	bl	8000d02 <HAL_SYSTICK_Config>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d10f      	bne.n	8000aa8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b0f      	cmp	r3, #15
 8000a8c:	d809      	bhi.n	8000aa2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	f04f 30ff 	mov.w	r0, #4294967295
 8000a96:	f000 f90a 	bl	8000cae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <HAL_InitTick+0x70>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	e007      	b.n	8000ab2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	73fb      	strb	r3, [r7, #15]
 8000aa6:	e004      	b.n	8000ab2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	73fb      	strb	r3, [r7, #15]
 8000aac:	e001      	b.n	8000ab2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_IncTick+0x1c>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a03      	ldr	r2, [pc, #12]	; (8000ae4 <HAL_IncTick+0x1c>)
 8000ad8:	6013      	str	r3, [r2, #0]
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	200002bc 	.word	0x200002bc
 8000ae8:	20000008 	.word	0x20000008

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b02      	ldr	r3, [pc, #8]	; (8000afc <HAL_GetTick+0x10>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	200002bc 	.word	0x200002bc

08000b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b32:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	60d3      	str	r3, [r2, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <__NVIC_GetPriorityGrouping+0x18>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	f003 0307 	and.w	r3, r3, #7
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	db0b      	blt.n	8000b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 021f 	and.w	r2, r3, #31
 8000b7c:	4906      	ldr	r1, [pc, #24]	; (8000b98 <__NVIC_EnableIRQ+0x34>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	095b      	lsrs	r3, r3, #5
 8000b84:	2001      	movs	r0, #1
 8000b86:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	; (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	; (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	; 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	; 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c64:	d301      	bcc.n	8000c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00f      	b.n	8000c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <SysTick_Config+0x40>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c72:	210f      	movs	r1, #15
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f7ff ff90 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <SysTick_Config+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SysTick_Config+0x40>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff2d 	bl	8000b00 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc0:	f7ff ff42 	bl	8000b48 <__NVIC_GetPriorityGrouping>
 8000cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f7ff ff90 	bl	8000bf0 <NVIC_EncodePriority>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff5f 	bl	8000b9c <__NVIC_SetPriority>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff35 	bl	8000b64 <__NVIC_EnableIRQ>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffa2 	bl	8000c54 <SysTick_Config>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b084      	sub	sp, #16
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d005      	beq.n	8000d3e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2204      	movs	r2, #4
 8000d36:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
 8000d3c:	e029      	b.n	8000d92 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 020e 	bic.w	r2, r2, #14
 8000d4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 0201 	bic.w	r2, r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f003 021c 	and.w	r2, r3, #28
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d70:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2201      	movs	r2, #1
 8000d76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	4798      	blx	r3
    }
  }
  return status;
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b087      	sub	sp, #28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000db2:	e160      	b.n	8001076 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	2101      	movs	r1, #1
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 8152 	beq.w	8001070 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d005      	beq.n	8000de4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d130      	bne.n	8000e46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	f003 0201 	and.w	r2, r3, #1
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d017      	beq.n	8000e82 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d123      	bne.n	8000ed6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	08da      	lsrs	r2, r3, #3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3208      	adds	r2, #8
 8000e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e9a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	220f      	movs	r2, #15
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	691a      	ldr	r2, [r3, #16]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	08da      	lsrs	r2, r3, #3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3208      	adds	r2, #8
 8000ed0:	6939      	ldr	r1, [r7, #16]
 8000ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0203 	and.w	r2, r3, #3
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 80ac 	beq.w	8001070 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f18:	4b5e      	ldr	r3, [pc, #376]	; (8001094 <HAL_GPIO_Init+0x2f8>)
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	4a5d      	ldr	r2, [pc, #372]	; (8001094 <HAL_GPIO_Init+0x2f8>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6213      	str	r3, [r2, #32]
 8000f24:	4b5b      	ldr	r3, [pc, #364]	; (8001094 <HAL_GPIO_Init+0x2f8>)
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f30:	4a59      	ldr	r2, [pc, #356]	; (8001098 <HAL_GPIO_Init+0x2fc>)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	3302      	adds	r3, #2
 8000f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a51      	ldr	r2, [pc, #324]	; (800109c <HAL_GPIO_Init+0x300>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d025      	beq.n	8000fa8 <HAL_GPIO_Init+0x20c>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a50      	ldr	r2, [pc, #320]	; (80010a0 <HAL_GPIO_Init+0x304>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d01f      	beq.n	8000fa4 <HAL_GPIO_Init+0x208>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a4f      	ldr	r2, [pc, #316]	; (80010a4 <HAL_GPIO_Init+0x308>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d019      	beq.n	8000fa0 <HAL_GPIO_Init+0x204>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a4e      	ldr	r2, [pc, #312]	; (80010a8 <HAL_GPIO_Init+0x30c>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d013      	beq.n	8000f9c <HAL_GPIO_Init+0x200>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a4d      	ldr	r2, [pc, #308]	; (80010ac <HAL_GPIO_Init+0x310>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d00d      	beq.n	8000f98 <HAL_GPIO_Init+0x1fc>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a4c      	ldr	r2, [pc, #304]	; (80010b0 <HAL_GPIO_Init+0x314>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d007      	beq.n	8000f94 <HAL_GPIO_Init+0x1f8>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a4b      	ldr	r2, [pc, #300]	; (80010b4 <HAL_GPIO_Init+0x318>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d101      	bne.n	8000f90 <HAL_GPIO_Init+0x1f4>
 8000f8c:	2306      	movs	r3, #6
 8000f8e:	e00c      	b.n	8000faa <HAL_GPIO_Init+0x20e>
 8000f90:	2307      	movs	r3, #7
 8000f92:	e00a      	b.n	8000faa <HAL_GPIO_Init+0x20e>
 8000f94:	2305      	movs	r3, #5
 8000f96:	e008      	b.n	8000faa <HAL_GPIO_Init+0x20e>
 8000f98:	2304      	movs	r3, #4
 8000f9a:	e006      	b.n	8000faa <HAL_GPIO_Init+0x20e>
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e004      	b.n	8000faa <HAL_GPIO_Init+0x20e>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	e002      	b.n	8000faa <HAL_GPIO_Init+0x20e>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <HAL_GPIO_Init+0x20e>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	f002 0203 	and.w	r2, r2, #3
 8000fb0:	0092      	lsls	r2, r2, #2
 8000fb2:	4093      	lsls	r3, r2
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fba:	4937      	ldr	r1, [pc, #220]	; (8001098 <HAL_GPIO_Init+0x2fc>)
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc8:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <HAL_GPIO_Init+0x31c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fec:	4a32      	ldr	r2, [pc, #200]	; (80010b8 <HAL_GPIO_Init+0x31c>)
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <HAL_GPIO_Init+0x31c>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001016:	4a28      	ldr	r2, [pc, #160]	; (80010b8 <HAL_GPIO_Init+0x31c>)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800101c:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <HAL_GPIO_Init+0x31c>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001040:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <HAL_GPIO_Init+0x31c>)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <HAL_GPIO_Init+0x31c>)
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800106a:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <HAL_GPIO_Init+0x31c>)
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	3301      	adds	r3, #1
 8001074:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	fa22 f303 	lsr.w	r3, r2, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	f47f ae97 	bne.w	8000db4 <HAL_GPIO_Init+0x18>
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	371c      	adds	r7, #28
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40010000 	.word	0x40010000
 800109c:	40020000 	.word	0x40020000
 80010a0:	40020400 	.word	0x40020400
 80010a4:	40020800 	.word	0x40020800
 80010a8:	40020c00 	.word	0x40020c00
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40021400 	.word	0x40021400
 80010b4:	40021800 	.word	0x40021800
 80010b8:	40010400 	.word	0x40010400

080010bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
 80010c8:	4613      	mov	r3, r2
 80010ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010cc:	787b      	ldrb	r3, [r7, #1]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010d2:	887a      	ldrh	r2, [r7, #2]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80010d8:	e003      	b.n	80010e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80010da:	887b      	ldrh	r3, [r7, #2]
 80010dc:	041a      	lsls	r2, r3, #16
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	619a      	str	r2, [r3, #24]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e31d      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010fe:	4b94      	ldr	r3, [pc, #592]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 030c 	and.w	r3, r3, #12
 8001106:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001108:	4b91      	ldr	r3, [pc, #580]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001110:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b00      	cmp	r3, #0
 800111c:	d07b      	beq.n	8001216 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	2b08      	cmp	r3, #8
 8001122:	d006      	beq.n	8001132 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	2b0c      	cmp	r3, #12
 8001128:	d10f      	bne.n	800114a <HAL_RCC_OscConfig+0x5e>
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001130:	d10b      	bne.n	800114a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001132:	4b87      	ldr	r3, [pc, #540]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d06a      	beq.n	8001214 <HAL_RCC_OscConfig+0x128>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d166      	bne.n	8001214 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e2f7      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d106      	bne.n	8001160 <HAL_RCC_OscConfig+0x74>
 8001152:	4b7f      	ldr	r3, [pc, #508]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a7e      	ldr	r2, [pc, #504]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 8001158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e02d      	b.n	80011bc <HAL_RCC_OscConfig+0xd0>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d10c      	bne.n	8001182 <HAL_RCC_OscConfig+0x96>
 8001168:	4b79      	ldr	r3, [pc, #484]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a78      	ldr	r2, [pc, #480]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 800116e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b76      	ldr	r3, [pc, #472]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a75      	ldr	r2, [pc, #468]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 800117a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	e01c      	b.n	80011bc <HAL_RCC_OscConfig+0xd0>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b05      	cmp	r3, #5
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0xb8>
 800118a:	4b71      	ldr	r3, [pc, #452]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a70      	ldr	r2, [pc, #448]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 8001190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	4b6e      	ldr	r3, [pc, #440]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a6d      	ldr	r2, [pc, #436]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 800119c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e00b      	b.n	80011bc <HAL_RCC_OscConfig+0xd0>
 80011a4:	4b6a      	ldr	r3, [pc, #424]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a69      	ldr	r2, [pc, #420]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 80011aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b67      	ldr	r3, [pc, #412]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a66      	ldr	r2, [pc, #408]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 80011b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d013      	beq.n	80011ec <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c4:	f7ff fc92 	bl	8000aec <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011cc:	f7ff fc8e 	bl	8000aec <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b64      	cmp	r3, #100	; 0x64
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e2ad      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011de:	4b5c      	ldr	r3, [pc, #368]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0f0      	beq.n	80011cc <HAL_RCC_OscConfig+0xe0>
 80011ea:	e014      	b.n	8001216 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fc7e 	bl	8000aec <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f4:	f7ff fc7a 	bl	8000aec <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b64      	cmp	r3, #100	; 0x64
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e299      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001206:	4b52      	ldr	r3, [pc, #328]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0x108>
 8001212:	e000      	b.n	8001216 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d05a      	beq.n	80012d8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	2b04      	cmp	r3, #4
 8001226:	d005      	beq.n	8001234 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2b0c      	cmp	r3, #12
 800122c:	d119      	bne.n	8001262 <HAL_RCC_OscConfig+0x176>
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d116      	bne.n	8001262 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001234:	4b46      	ldr	r3, [pc, #280]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <HAL_RCC_OscConfig+0x160>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d001      	beq.n	800124c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e276      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124c:	4b40      	ldr	r3, [pc, #256]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	493d      	ldr	r1, [pc, #244]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 800125c:	4313      	orrs	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001260:	e03a      	b.n	80012d8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d020      	beq.n	80012ac <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126a:	4b3a      	ldr	r3, [pc, #232]	; (8001354 <HAL_RCC_OscConfig+0x268>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fc3c 	bl	8000aec <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001278:	f7ff fc38 	bl	8000aec <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e257      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800128a:	4b31      	ldr	r3, [pc, #196]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001296:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	492a      	ldr	r1, [pc, #168]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	604b      	str	r3, [r1, #4]
 80012aa:	e015      	b.n	80012d8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <HAL_RCC_OscConfig+0x268>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b2:	f7ff fc1b 	bl	8000aec <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ba:	f7ff fc17 	bl	8000aec <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e236      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012cc:	4b20      	ldr	r3, [pc, #128]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f0      	bne.n	80012ba <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0310 	and.w	r3, r3, #16
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 80b8 	beq.w	8001456 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d170      	bne.n	80013ce <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d005      	beq.n	8001304 <HAL_RCC_OscConfig+0x218>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e21a      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1a      	ldr	r2, [r3, #32]
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001310:	429a      	cmp	r2, r3
 8001312:	d921      	bls.n	8001358 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fc7d 	bl	8001c18 <RCC_SetFlashLatencyFromMSIRange>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e208      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	4906      	ldr	r1, [pc, #24]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 8001336:	4313      	orrs	r3, r2
 8001338:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	061b      	lsls	r3, r3, #24
 8001348:	4901      	ldr	r1, [pc, #4]	; (8001350 <HAL_RCC_OscConfig+0x264>)
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
 800134e:	e020      	b.n	8001392 <HAL_RCC_OscConfig+0x2a6>
 8001350:	40023800 	.word	0x40023800
 8001354:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001358:	4b99      	ldr	r3, [pc, #612]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	4996      	ldr	r1, [pc, #600]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 8001366:	4313      	orrs	r3, r2
 8001368:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800136a:	4b95      	ldr	r3, [pc, #596]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	061b      	lsls	r3, r3, #24
 8001378:	4991      	ldr	r1, [pc, #580]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 800137a:	4313      	orrs	r3, r2
 800137c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4618      	mov	r0, r3
 8001384:	f000 fc48 	bl	8001c18 <RCC_SetFlashLatencyFromMSIRange>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e1d3      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	0b5b      	lsrs	r3, r3, #13
 8001398:	3301      	adds	r3, #1
 800139a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80013a2:	4a87      	ldr	r2, [pc, #540]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 80013a4:	6892      	ldr	r2, [r2, #8]
 80013a6:	0912      	lsrs	r2, r2, #4
 80013a8:	f002 020f 	and.w	r2, r2, #15
 80013ac:	4985      	ldr	r1, [pc, #532]	; (80015c4 <HAL_RCC_OscConfig+0x4d8>)
 80013ae:	5c8a      	ldrb	r2, [r1, r2]
 80013b0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013b2:	4a85      	ldr	r2, [pc, #532]	; (80015c8 <HAL_RCC_OscConfig+0x4dc>)
 80013b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013b6:	4b85      	ldr	r3, [pc, #532]	; (80015cc <HAL_RCC_OscConfig+0x4e0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fb4a 	bl	8000a54 <HAL_InitTick>
 80013c0:	4603      	mov	r3, r0
 80013c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d045      	beq.n	8001456 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	e1b5      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d029      	beq.n	800142a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013d6:	4b7e      	ldr	r3, [pc, #504]	; (80015d0 <HAL_RCC_OscConfig+0x4e4>)
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013dc:	f7ff fb86 	bl	8000aec <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013e4:	f7ff fb82 	bl	8000aec <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e1a1      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013f6:	4b72      	ldr	r3, [pc, #456]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001402:	4b6f      	ldr	r3, [pc, #444]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	496c      	ldr	r1, [pc, #432]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 8001410:	4313      	orrs	r3, r2
 8001412:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001414:	4b6a      	ldr	r3, [pc, #424]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	061b      	lsls	r3, r3, #24
 8001422:	4967      	ldr	r1, [pc, #412]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
 8001428:	e015      	b.n	8001456 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800142a:	4b69      	ldr	r3, [pc, #420]	; (80015d0 <HAL_RCC_OscConfig+0x4e4>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff fb5c 	bl	8000aec <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001438:	f7ff fb58 	bl	8000aec <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e177      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800144a:	4b5d      	ldr	r3, [pc, #372]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b00      	cmp	r3, #0
 8001460:	d030      	beq.n	80014c4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d016      	beq.n	8001498 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800146a:	4b5a      	ldr	r3, [pc, #360]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001470:	f7ff fb3c 	bl	8000aec <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001478:	f7ff fb38 	bl	8000aec <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e157      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800148a:	4b4d      	ldr	r3, [pc, #308]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 800148c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x38c>
 8001496:	e015      	b.n	80014c4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001498:	4b4e      	ldr	r3, [pc, #312]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149e:	f7ff fb25 	bl	8000aec <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a6:	f7ff fb21 	bl	8000aec <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e140      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014b8:	4b41      	ldr	r3, [pc, #260]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 80014ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80b5 	beq.w	800163c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014d6:	4b3a      	ldr	r3, [pc, #232]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10d      	bne.n	80014fe <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	4a36      	ldr	r2, [pc, #216]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	6253      	str	r3, [r2, #36]	; 0x24
 80014ee:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014fa:	2301      	movs	r3, #1
 80014fc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fe:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <HAL_RCC_OscConfig+0x4ec>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001506:	2b00      	cmp	r3, #0
 8001508:	d118      	bne.n	800153c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800150a:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <HAL_RCC_OscConfig+0x4ec>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a32      	ldr	r2, [pc, #200]	; (80015d8 <HAL_RCC_OscConfig+0x4ec>)
 8001510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001516:	f7ff fae9 	bl	8000aec <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151e:	f7ff fae5 	bl	8000aec <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b64      	cmp	r3, #100	; 0x64
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e104      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001530:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <HAL_RCC_OscConfig+0x4ec>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d106      	bne.n	8001552 <HAL_RCC_OscConfig+0x466>
 8001544:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 8001546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001548:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 800154a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154e:	6353      	str	r3, [r2, #52]	; 0x34
 8001550:	e02d      	b.n	80015ae <HAL_RCC_OscConfig+0x4c2>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10c      	bne.n	8001574 <HAL_RCC_OscConfig+0x488>
 800155a:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 800155c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155e:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 8001560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001564:	6353      	str	r3, [r2, #52]	; 0x34
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 8001568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156a:	4a15      	ldr	r2, [pc, #84]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 800156c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001570:	6353      	str	r3, [r2, #52]	; 0x34
 8001572:	e01c      	b.n	80015ae <HAL_RCC_OscConfig+0x4c2>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b05      	cmp	r3, #5
 800157a:	d10c      	bne.n	8001596 <HAL_RCC_OscConfig+0x4aa>
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 800157e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001580:	4a0f      	ldr	r2, [pc, #60]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 8001582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001586:	6353      	str	r3, [r2, #52]	; 0x34
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 800158a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800158c:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 800158e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001592:	6353      	str	r3, [r2, #52]	; 0x34
 8001594:	e00b      	b.n	80015ae <HAL_RCC_OscConfig+0x4c2>
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 8001598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 800159c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015a0:	6353      	str	r3, [r2, #52]	; 0x34
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 80015a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a6:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <HAL_RCC_OscConfig+0x4d4>)
 80015a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015ac:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d024      	beq.n	8001600 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b6:	f7ff fa99 	bl	8000aec <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015bc:	e019      	b.n	80015f2 <HAL_RCC_OscConfig+0x506>
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	080032b4 	.word	0x080032b4
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000004 	.word	0x20000004
 80015d0:	42470020 	.word	0x42470020
 80015d4:	42470680 	.word	0x42470680
 80015d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015dc:	f7ff fa86 	bl	8000aec <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e0a3      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015f2:	4b54      	ldr	r3, [pc, #336]	; (8001744 <HAL_RCC_OscConfig+0x658>)
 80015f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0ee      	beq.n	80015dc <HAL_RCC_OscConfig+0x4f0>
 80015fe:	e014      	b.n	800162a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001600:	f7ff fa74 	bl	8000aec <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001606:	e00a      	b.n	800161e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001608:	f7ff fa70 	bl	8000aec <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	; 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e08d      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800161e:	4b49      	ldr	r3, [pc, #292]	; (8001744 <HAL_RCC_OscConfig+0x658>)
 8001620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001622:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1ee      	bne.n	8001608 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800162a:	7ffb      	ldrb	r3, [r7, #31]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d105      	bne.n	800163c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001630:	4b44      	ldr	r3, [pc, #272]	; (8001744 <HAL_RCC_OscConfig+0x658>)
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	4a43      	ldr	r2, [pc, #268]	; (8001744 <HAL_RCC_OscConfig+0x658>)
 8001636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800163a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	2b00      	cmp	r3, #0
 8001642:	d079      	beq.n	8001738 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2b0c      	cmp	r3, #12
 8001648:	d056      	beq.n	80016f8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	2b02      	cmp	r3, #2
 8001650:	d13b      	bne.n	80016ca <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001652:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <HAL_RCC_OscConfig+0x65c>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fa48 	bl	8000aec <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001660:	f7ff fa44 	bl	8000aec <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e063      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001672:	4b34      	ldr	r3, [pc, #208]	; (8001744 <HAL_RCC_OscConfig+0x658>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800167e:	4b31      	ldr	r3, [pc, #196]	; (8001744 <HAL_RCC_OscConfig+0x658>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	4319      	orrs	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	430b      	orrs	r3, r1
 8001696:	492b      	ldr	r1, [pc, #172]	; (8001744 <HAL_RCC_OscConfig+0x658>)
 8001698:	4313      	orrs	r3, r2
 800169a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800169c:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <HAL_RCC_OscConfig+0x65c>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff fa23 	bl	8000aec <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016aa:	f7ff fa1f 	bl	8000aec <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e03e      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016bc:	4b21      	ldr	r3, [pc, #132]	; (8001744 <HAL_RCC_OscConfig+0x658>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x5be>
 80016c8:	e036      	b.n	8001738 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ca:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <HAL_RCC_OscConfig+0x65c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fa0c 	bl	8000aec <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d8:	f7ff fa08 	bl	8000aec <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e027      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <HAL_RCC_OscConfig+0x658>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x5ec>
 80016f6:	e01f      	b.n	8001738 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e01a      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_RCC_OscConfig+0x658>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	429a      	cmp	r2, r3
 8001716:	d10d      	bne.n	8001734 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d106      	bne.n	8001734 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3720      	adds	r7, #32
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800
 8001748:	42470060 	.word	0x42470060

0800174c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e11a      	b.n	8001996 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001760:	4b8f      	ldr	r3, [pc, #572]	; (80019a0 <HAL_RCC_ClockConfig+0x254>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d919      	bls.n	80017a2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <HAL_RCC_ClockConfig+0x34>
 8001774:	4b8a      	ldr	r3, [pc, #552]	; (80019a0 <HAL_RCC_ClockConfig+0x254>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a89      	ldr	r2, [pc, #548]	; (80019a0 <HAL_RCC_ClockConfig+0x254>)
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b87      	ldr	r3, [pc, #540]	; (80019a0 <HAL_RCC_ClockConfig+0x254>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f023 0201 	bic.w	r2, r3, #1
 8001788:	4985      	ldr	r1, [pc, #532]	; (80019a0 <HAL_RCC_ClockConfig+0x254>)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	4313      	orrs	r3, r2
 800178e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001790:	4b83      	ldr	r3, [pc, #524]	; (80019a0 <HAL_RCC_ClockConfig+0x254>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d001      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e0f9      	b.n	8001996 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d008      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ae:	4b7d      	ldr	r3, [pc, #500]	; (80019a4 <HAL_RCC_ClockConfig+0x258>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	497a      	ldr	r1, [pc, #488]	; (80019a4 <HAL_RCC_ClockConfig+0x258>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 808e 	beq.w	80018ea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017d6:	4b73      	ldr	r3, [pc, #460]	; (80019a4 <HAL_RCC_ClockConfig+0x258>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d121      	bne.n	8001826 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e0d7      	b.n	8001996 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017ee:	4b6d      	ldr	r3, [pc, #436]	; (80019a4 <HAL_RCC_ClockConfig+0x258>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d115      	bne.n	8001826 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e0cb      	b.n	8001996 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001806:	4b67      	ldr	r3, [pc, #412]	; (80019a4 <HAL_RCC_ClockConfig+0x258>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d109      	bne.n	8001826 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e0bf      	b.n	8001996 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001816:	4b63      	ldr	r3, [pc, #396]	; (80019a4 <HAL_RCC_ClockConfig+0x258>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0b7      	b.n	8001996 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001826:	4b5f      	ldr	r3, [pc, #380]	; (80019a4 <HAL_RCC_ClockConfig+0x258>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f023 0203 	bic.w	r2, r3, #3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	495c      	ldr	r1, [pc, #368]	; (80019a4 <HAL_RCC_ClockConfig+0x258>)
 8001834:	4313      	orrs	r3, r2
 8001836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001838:	f7ff f958 	bl	8000aec <HAL_GetTick>
 800183c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d112      	bne.n	800186c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001846:	e00a      	b.n	800185e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001848:	f7ff f950 	bl	8000aec <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e09b      	b.n	8001996 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800185e:	4b51      	ldr	r3, [pc, #324]	; (80019a4 <HAL_RCC_ClockConfig+0x258>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b08      	cmp	r3, #8
 8001868:	d1ee      	bne.n	8001848 <HAL_RCC_ClockConfig+0xfc>
 800186a:	e03e      	b.n	80018ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b03      	cmp	r3, #3
 8001872:	d112      	bne.n	800189a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001874:	e00a      	b.n	800188c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001876:	f7ff f939 	bl	8000aec <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	f241 3288 	movw	r2, #5000	; 0x1388
 8001884:	4293      	cmp	r3, r2
 8001886:	d901      	bls.n	800188c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e084      	b.n	8001996 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800188c:	4b45      	ldr	r3, [pc, #276]	; (80019a4 <HAL_RCC_ClockConfig+0x258>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b0c      	cmp	r3, #12
 8001896:	d1ee      	bne.n	8001876 <HAL_RCC_ClockConfig+0x12a>
 8001898:	e027      	b.n	80018ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d11d      	bne.n	80018de <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a4:	f7ff f922 	bl	8000aec <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e06d      	b.n	8001996 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ba:	4b3a      	ldr	r3, [pc, #232]	; (80019a4 <HAL_RCC_ClockConfig+0x258>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d1ee      	bne.n	80018a4 <HAL_RCC_ClockConfig+0x158>
 80018c6:	e010      	b.n	80018ea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c8:	f7ff f910 	bl	8000aec <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e05b      	b.n	8001996 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80018de:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <HAL_RCC_ClockConfig+0x258>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1ee      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ea:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <HAL_RCC_ClockConfig+0x254>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d219      	bcs.n	800192c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d105      	bne.n	800190a <HAL_RCC_ClockConfig+0x1be>
 80018fe:	4b28      	ldr	r3, [pc, #160]	; (80019a0 <HAL_RCC_ClockConfig+0x254>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a27      	ldr	r2, [pc, #156]	; (80019a0 <HAL_RCC_ClockConfig+0x254>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <HAL_RCC_ClockConfig+0x254>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 0201 	bic.w	r2, r3, #1
 8001912:	4923      	ldr	r1, [pc, #140]	; (80019a0 <HAL_RCC_ClockConfig+0x254>)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191a:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <HAL_RCC_ClockConfig+0x254>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e034      	b.n	8001996 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d008      	beq.n	800194a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_RCC_ClockConfig+0x258>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	4917      	ldr	r1, [pc, #92]	; (80019a4 <HAL_RCC_ClockConfig+0x258>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d009      	beq.n	800196a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_RCC_ClockConfig+0x258>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	490f      	ldr	r1, [pc, #60]	; (80019a4 <HAL_RCC_ClockConfig+0x258>)
 8001966:	4313      	orrs	r3, r2
 8001968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800196a:	f000 f823 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 800196e:	4602      	mov	r2, r0
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <HAL_RCC_ClockConfig+0x258>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	490b      	ldr	r1, [pc, #44]	; (80019a8 <HAL_RCC_ClockConfig+0x25c>)
 800197c:	5ccb      	ldrb	r3, [r1, r3]
 800197e:	fa22 f303 	lsr.w	r3, r2, r3
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <HAL_RCC_ClockConfig+0x260>)
 8001984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_RCC_ClockConfig+0x264>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff f862 	bl	8000a54 <HAL_InitTick>
 8001990:	4603      	mov	r3, r0
 8001992:	72fb      	strb	r3, [r7, #11]

  return status;
 8001994:	7afb      	ldrb	r3, [r7, #11]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023c00 	.word	0x40023c00
 80019a4:	40023800 	.word	0x40023800
 80019a8:	080032b4 	.word	0x080032b4
 80019ac:	20000000 	.word	0x20000000
 80019b0:	20000004 	.word	0x20000004

080019b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b8:	b092      	sub	sp, #72	; 0x48
 80019ba:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80019bc:	4b79      	ldr	r3, [pc, #484]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	d00d      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x34>
 80019cc:	2b0c      	cmp	r3, #12
 80019ce:	f200 80d5 	bhi.w	8001b7c <HAL_RCC_GetSysClockFreq+0x1c8>
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d002      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0x28>
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d003      	beq.n	80019e2 <HAL_RCC_GetSysClockFreq+0x2e>
 80019da:	e0cf      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019dc:	4b72      	ldr	r3, [pc, #456]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80019de:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80019e0:	e0da      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019e2:	4b72      	ldr	r3, [pc, #456]	; (8001bac <HAL_RCC_GetSysClockFreq+0x1f8>)
 80019e4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80019e6:	e0d7      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80019e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ea:	0c9b      	lsrs	r3, r3, #18
 80019ec:	f003 020f 	and.w	r2, r3, #15
 80019f0:	4b6f      	ldr	r3, [pc, #444]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80019f2:	5c9b      	ldrb	r3, [r3, r2]
 80019f4:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80019f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019f8:	0d9b      	lsrs	r3, r3, #22
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	3301      	adds	r3, #1
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a02:	4b68      	ldr	r3, [pc, #416]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d05d      	beq.n	8001aca <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a10:	2200      	movs	r2, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	4611      	mov	r1, r2
 8001a16:	4604      	mov	r4, r0
 8001a18:	460d      	mov	r5, r1
 8001a1a:	4622      	mov	r2, r4
 8001a1c:	462b      	mov	r3, r5
 8001a1e:	f04f 0000 	mov.w	r0, #0
 8001a22:	f04f 0100 	mov.w	r1, #0
 8001a26:	0159      	lsls	r1, r3, #5
 8001a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a2c:	0150      	lsls	r0, r2, #5
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4621      	mov	r1, r4
 8001a34:	1a51      	subs	r1, r2, r1
 8001a36:	6139      	str	r1, [r7, #16]
 8001a38:	4629      	mov	r1, r5
 8001a3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a4c:	4659      	mov	r1, fp
 8001a4e:	018b      	lsls	r3, r1, #6
 8001a50:	4651      	mov	r1, sl
 8001a52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a56:	4651      	mov	r1, sl
 8001a58:	018a      	lsls	r2, r1, #6
 8001a5a:	46d4      	mov	ip, sl
 8001a5c:	ebb2 080c 	subs.w	r8, r2, ip
 8001a60:	4659      	mov	r1, fp
 8001a62:	eb63 0901 	sbc.w	r9, r3, r1
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a7a:	4690      	mov	r8, r2
 8001a7c:	4699      	mov	r9, r3
 8001a7e:	4623      	mov	r3, r4
 8001a80:	eb18 0303 	adds.w	r3, r8, r3
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	462b      	mov	r3, r5
 8001a88:	eb49 0303 	adc.w	r3, r9, r3
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	024b      	lsls	r3, r1, #9
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001aa8:	4601      	mov	r1, r0
 8001aaa:	024a      	lsls	r2, r1, #9
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ab6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ab8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001abc:	f7fe fb66 	bl	800018c <__aeabi_uldivmod>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ac8:	e055      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001acc:	2200      	movs	r2, #0
 8001ace:	623b      	str	r3, [r7, #32]
 8001ad0:	627a      	str	r2, [r7, #36]	; 0x24
 8001ad2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ad6:	4642      	mov	r2, r8
 8001ad8:	464b      	mov	r3, r9
 8001ada:	f04f 0000 	mov.w	r0, #0
 8001ade:	f04f 0100 	mov.w	r1, #0
 8001ae2:	0159      	lsls	r1, r3, #5
 8001ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ae8:	0150      	lsls	r0, r2, #5
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	46c4      	mov	ip, r8
 8001af0:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001af4:	4640      	mov	r0, r8
 8001af6:	4649      	mov	r1, r9
 8001af8:	468c      	mov	ip, r1
 8001afa:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b0a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b0e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b12:	ebb2 040a 	subs.w	r4, r2, sl
 8001b16:	eb63 050b 	sbc.w	r5, r3, fp
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	00eb      	lsls	r3, r5, #3
 8001b24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b28:	00e2      	lsls	r2, r4, #3
 8001b2a:	4614      	mov	r4, r2
 8001b2c:	461d      	mov	r5, r3
 8001b2e:	4603      	mov	r3, r0
 8001b30:	18e3      	adds	r3, r4, r3
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	460b      	mov	r3, r1
 8001b36:	eb45 0303 	adc.w	r3, r5, r3
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b48:	4629      	mov	r1, r5
 8001b4a:	028b      	lsls	r3, r1, #10
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	4629      	mov	r1, r5
 8001b50:	4604      	mov	r4, r0
 8001b52:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001b56:	4601      	mov	r1, r0
 8001b58:	028a      	lsls	r2, r1, #10
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b60:	2200      	movs	r2, #0
 8001b62:	61bb      	str	r3, [r7, #24]
 8001b64:	61fa      	str	r2, [r7, #28]
 8001b66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b6a:	f7fe fb0f 	bl	800018c <__aeabi_uldivmod>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4613      	mov	r3, r2
 8001b74:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8001b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b78:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001b7a:	e00d      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	0b5b      	lsrs	r3, r3, #13
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001b96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3748      	adds	r7, #72	; 0x48
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	00f42400 	.word	0x00f42400
 8001bac:	007a1200 	.word	0x007a1200
 8001bb0:	080032a8 	.word	0x080032a8

08001bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb8:	4b02      	ldr	r3, [pc, #8]	; (8001bc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bba:	681b      	ldr	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	20000000 	.word	0x20000000

08001bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bcc:	f7ff fff2 	bl	8001bb4 <HAL_RCC_GetHCLKFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	4903      	ldr	r1, [pc, #12]	; (8001bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800
 8001bec:	080032c4 	.word	0x080032c4

08001bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bf4:	f7ff ffde 	bl	8001bb4 <HAL_RCC_GetHCLKFreq>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	0adb      	lsrs	r3, r3, #11
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	4903      	ldr	r1, [pc, #12]	; (8001c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c06:	5ccb      	ldrb	r3, [r1, r3]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	080032c4 	.word	0x080032c4

08001c18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c24:	4b29      	ldr	r3, [pc, #164]	; (8001ccc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d12c      	bne.n	8001c8a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c30:	4b26      	ldr	r3, [pc, #152]	; (8001ccc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001c3c:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e016      	b.n	8001c76 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c48:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	4a1f      	ldr	r2, [pc, #124]	; (8001ccc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c52:	6253      	str	r3, [r2, #36]	; 0x24
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001c68:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c6a:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	4a17      	ldr	r2, [pc, #92]	; (8001ccc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c74:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001c7c:	d105      	bne.n	8001c8a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001c84:	d101      	bne.n	8001c8a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001c86:	2301      	movs	r3, #1
 8001c88:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d105      	bne.n	8001c9c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001c90:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0f      	ldr	r2, [pc, #60]	; (8001cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c96:	f043 0304 	orr.w	r3, r3, #4
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f023 0201 	bic.w	r2, r3, #1
 8001ca4:	490b      	ldr	r1, [pc, #44]	; (8001cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d001      	beq.n	8001cbe <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40007000 	.word	0x40007000
 8001cd4:	40023c00 	.word	0x40023c00

08001cd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e07b      	b.n	8001de2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d108      	bne.n	8001d04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cfa:	d009      	beq.n	8001d10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
 8001d02:	e005      	b.n	8001d10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d106      	bne.n	8001d30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7fe fd56 	bl	80007dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d94:	ea42 0103 	orr.w	r1, r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	0c1b      	lsrs	r3, r3, #16
 8001dae:	f003 0104 	and.w	r1, r3, #4
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	f003 0210 	and.w	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69da      	ldr	r2, [r3, #28]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b08c      	sub	sp, #48	; 0x30
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_SPI_TransmitReceive+0x26>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e18a      	b.n	8002126 <HAL_SPI_TransmitReceive+0x33c>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e18:	f7fe fe68 	bl	8000aec <HAL_GetTick>
 8001e1c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d00f      	beq.n	8001e5a <HAL_SPI_TransmitReceive+0x70>
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e40:	d107      	bne.n	8001e52 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d103      	bne.n	8001e52 <HAL_SPI_TransmitReceive+0x68>
 8001e4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d003      	beq.n	8001e5a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001e52:	2302      	movs	r3, #2
 8001e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e58:	e15b      	b.n	8002112 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_SPI_TransmitReceive+0x82>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <HAL_SPI_TransmitReceive+0x82>
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d103      	bne.n	8001e74 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e72:	e14e      	b.n	8002112 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d003      	beq.n	8001e88 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2205      	movs	r2, #5
 8001e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	887a      	ldrh	r2, [r7, #2]
 8001e9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	887a      	ldrh	r2, [r7, #2]
 8001eaa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec8:	2b40      	cmp	r3, #64	; 0x40
 8001eca:	d007      	beq.n	8001edc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ee4:	d178      	bne.n	8001fd8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <HAL_SPI_TransmitReceive+0x10a>
 8001eee:	8b7b      	ldrh	r3, [r7, #26]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d166      	bne.n	8001fc2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	881a      	ldrh	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	1c9a      	adds	r2, r3, #2
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f18:	e053      	b.n	8001fc2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d11b      	bne.n	8001f60 <HAL_SPI_TransmitReceive+0x176>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d016      	beq.n	8001f60 <HAL_SPI_TransmitReceive+0x176>
 8001f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d113      	bne.n	8001f60 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	881a      	ldrh	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	1c9a      	adds	r2, r3, #2
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d119      	bne.n	8001fa2 <HAL_SPI_TransmitReceive+0x1b8>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d014      	beq.n	8001fa2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f82:	b292      	uxth	r2, r2
 8001f84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8a:	1c9a      	adds	r2, r3, #2
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001fa2:	f7fe fda3 	bl	8000aec <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d807      	bhi.n	8001fc2 <HAL_SPI_TransmitReceive+0x1d8>
 8001fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d003      	beq.n	8001fc2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001fc0:	e0a7      	b.n	8002112 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1a6      	bne.n	8001f1a <HAL_SPI_TransmitReceive+0x130>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1a1      	bne.n	8001f1a <HAL_SPI_TransmitReceive+0x130>
 8001fd6:	e07c      	b.n	80020d2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <HAL_SPI_TransmitReceive+0x1fc>
 8001fe0:	8b7b      	ldrh	r3, [r7, #26]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d16b      	bne.n	80020be <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	330c      	adds	r3, #12
 8001ff0:	7812      	ldrb	r2, [r2, #0]
 8001ff2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002002:	b29b      	uxth	r3, r3
 8002004:	3b01      	subs	r3, #1
 8002006:	b29a      	uxth	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800200c:	e057      	b.n	80020be <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b02      	cmp	r3, #2
 800201a:	d11c      	bne.n	8002056 <HAL_SPI_TransmitReceive+0x26c>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002020:	b29b      	uxth	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d017      	beq.n	8002056 <HAL_SPI_TransmitReceive+0x26c>
 8002026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002028:	2b01      	cmp	r3, #1
 800202a:	d114      	bne.n	8002056 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	330c      	adds	r3, #12
 8002036:	7812      	ldrb	r2, [r2, #0]
 8002038:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002048:	b29b      	uxth	r3, r3
 800204a:	3b01      	subs	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	d119      	bne.n	8002098 <HAL_SPI_TransmitReceive+0x2ae>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d014      	beq.n	8002098 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800208a:	b29b      	uxth	r3, r3
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002094:	2301      	movs	r3, #1
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002098:	f7fe fd28 	bl	8000aec <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d803      	bhi.n	80020b0 <HAL_SPI_TransmitReceive+0x2c6>
 80020a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ae:	d102      	bne.n	80020b6 <HAL_SPI_TransmitReceive+0x2cc>
 80020b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d103      	bne.n	80020be <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80020bc:	e029      	b.n	8002112 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1a2      	bne.n	800200e <HAL_SPI_TransmitReceive+0x224>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d19d      	bne.n	800200e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f9dc 	bl	8002494 <SPI_EndRxTxTransaction>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d006      	beq.n	80020f0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2220      	movs	r2, #32
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80020ee:	e010      	b.n	8002112 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10b      	bne.n	8002110 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	e000      	b.n	8002112 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002110:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002122:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002126:	4618      	mov	r0, r3
 8002128:	3730      	adds	r7, #48	; 0x30
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	099b      	lsrs	r3, r3, #6
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10f      	bne.n	8002174 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00a      	beq.n	8002174 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	099b      	lsrs	r3, r3, #6
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d004      	beq.n	8002174 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
    return;
 8002172:	e0d7      	b.n	8002324 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	085b      	lsrs	r3, r3, #1
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <HAL_SPI_IRQHandler+0x66>
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	09db      	lsrs	r3, r3, #7
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d004      	beq.n	8002196 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	4798      	blx	r3
    return;
 8002194:	e0c6      	b.n	8002324 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	095b      	lsrs	r3, r3, #5
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10c      	bne.n	80021bc <HAL_SPI_IRQHandler+0x8c>
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	099b      	lsrs	r3, r3, #6
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d106      	bne.n	80021bc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 80b4 	beq.w	8002324 <HAL_SPI_IRQHandler+0x1f4>
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80ad 	beq.w	8002324 <HAL_SPI_IRQHandler+0x1f4>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	099b      	lsrs	r3, r3, #6
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d023      	beq.n	800221e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d011      	beq.n	8002206 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	f043 0204 	orr.w	r2, r3, #4
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	e00b      	b.n	800221e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	693b      	ldr	r3, [r7, #16]
        return;
 800221c:	e082      	b.n	8002324 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	095b      	lsrs	r3, r3, #5
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d014      	beq.n	8002254 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
#if defined(SPI_CR2_FRF)
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00c      	beq.n	800227a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002264:	f043 0208 	orr.w	r2, r3, #8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227e:	2b00      	cmp	r3, #0
 8002280:	d04f      	beq.n	8002322 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002290:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d104      	bne.n	80022ae <HAL_SPI_IRQHandler+0x17e>
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d034      	beq.n	8002318 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0203 	bic.w	r2, r2, #3
 80022bc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d011      	beq.n	80022ea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ca:	4a18      	ldr	r2, [pc, #96]	; (800232c <HAL_SPI_IRQHandler+0x1fc>)
 80022cc:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe fd21 	bl	8000d1a <HAL_DMA_Abort_IT>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d016      	beq.n	8002320 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f6:	4a0d      	ldr	r2, [pc, #52]	; (800232c <HAL_SPI_IRQHandler+0x1fc>)
 80022f8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe fd0b 	bl	8000d1a <HAL_DMA_Abort_IT>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002316:	e003      	b.n	8002320 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f809 	bl	8002330 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800231e:	e000      	b.n	8002322 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002320:	bf00      	nop
    return;
 8002322:	bf00      	nop
  }
}
 8002324:	3720      	adds	r7, #32
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	0800235d 	.word	0x0800235d

08002330 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002350:	b2db      	uxtb	r3, r3
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f7ff ffda 	bl	8002330 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	4613      	mov	r3, r2
 8002392:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002394:	f7fe fbaa 	bl	8000aec <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	4413      	add	r3, r2
 80023a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80023a4:	f7fe fba2 	bl	8000aec <HAL_GetTick>
 80023a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80023aa:	4b39      	ldr	r3, [pc, #228]	; (8002490 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	015b      	lsls	r3, r3, #5
 80023b0:	0d1b      	lsrs	r3, r3, #20
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	fb02 f303 	mul.w	r3, r2, r3
 80023b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023ba:	e054      	b.n	8002466 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c2:	d050      	beq.n	8002466 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023c4:	f7fe fb92 	bl	8000aec <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d902      	bls.n	80023da <SPI_WaitFlagStateUntilTimeout+0x56>
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d13d      	bne.n	8002456 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023f2:	d111      	bne.n	8002418 <SPI_WaitFlagStateUntilTimeout+0x94>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023fc:	d004      	beq.n	8002408 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002406:	d107      	bne.n	8002418 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002416:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002420:	d10f      	bne.n	8002442 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002440:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e017      	b.n	8002486 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	3b01      	subs	r3, #1
 8002464:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4013      	ands	r3, r2
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	429a      	cmp	r2, r3
 8002474:	bf0c      	ite	eq
 8002476:	2301      	moveq	r3, #1
 8002478:	2300      	movne	r3, #0
 800247a:	b2db      	uxtb	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	429a      	cmp	r2, r3
 8002482:	d19b      	bne.n	80023bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000000 	.word	0x20000000

08002494 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80024a0:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <SPI_EndRxTxTransaction+0x7c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1b      	ldr	r2, [pc, #108]	; (8002514 <SPI_EndRxTxTransaction+0x80>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0d5b      	lsrs	r3, r3, #21
 80024ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024be:	d112      	bne.n	80024e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2200      	movs	r2, #0
 80024c8:	2180      	movs	r1, #128	; 0x80
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f7ff ff5a 	bl	8002384 <SPI_WaitFlagStateUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d016      	beq.n	8002504 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024da:	f043 0220 	orr.w	r2, r3, #32
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e00f      	b.n	8002506 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fc:	2b80      	cmp	r3, #128	; 0x80
 80024fe:	d0f2      	beq.n	80024e6 <SPI_EndRxTxTransaction+0x52>
 8002500:	e000      	b.n	8002504 <SPI_EndRxTxTransaction+0x70>
        break;
 8002502:	bf00      	nop
  }

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000000 	.word	0x20000000
 8002514:	165e9f81 	.word	0x165e9f81

08002518 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e03f      	b.n	80025aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7fe f998 	bl	8000874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2224      	movs	r2, #36	; 0x24
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800255a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f905 	bl	800276c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002570:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695a      	ldr	r2, [r3, #20]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002580:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002590:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b08a      	sub	sp, #40	; 0x28
 80025b6:	af02      	add	r7, sp, #8
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	603b      	str	r3, [r7, #0]
 80025be:	4613      	mov	r3, r2
 80025c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d17c      	bne.n	80026cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_UART_Transmit+0x2c>
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e075      	b.n	80026ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <HAL_UART_Transmit+0x3e>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e06e      	b.n	80026ce <HAL_UART_Transmit+0x11c>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2221      	movs	r2, #33	; 0x21
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002606:	f7fe fa71 	bl	8000aec <HAL_GetTick>
 800260a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	88fa      	ldrh	r2, [r7, #6]
 8002610:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	88fa      	ldrh	r2, [r7, #6]
 8002616:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002620:	d108      	bne.n	8002634 <HAL_UART_Transmit+0x82>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d104      	bne.n	8002634 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	e003      	b.n	800263c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002638:	2300      	movs	r3, #0
 800263a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002644:	e02a      	b.n	800269c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2200      	movs	r2, #0
 800264e:	2180      	movs	r1, #128	; 0x80
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f840 	bl	80026d6 <UART_WaitOnFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e036      	b.n	80026ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10b      	bne.n	800267e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002674:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	3302      	adds	r3, #2
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	e007      	b.n	800268e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	781a      	ldrb	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	3301      	adds	r3, #1
 800268c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1cf      	bne.n	8002646 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2200      	movs	r2, #0
 80026ae:	2140      	movs	r1, #64	; 0x40
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f810 	bl	80026d6 <UART_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e006      	b.n	80026ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
  }
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b084      	sub	sp, #16
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	4613      	mov	r3, r2
 80026e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026e6:	e02c      	b.n	8002742 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ee:	d028      	beq.n	8002742 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <UART_WaitOnFlagUntilTimeout+0x30>
 80026f6:	f7fe f9f9 	bl	8000aec <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	429a      	cmp	r2, r3
 8002704:	d21d      	bcs.n	8002742 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002714:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0201 	bic.w	r2, r2, #1
 8002724:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e00f      	b.n	8002762 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4013      	ands	r3, r2
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	429a      	cmp	r2, r3
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	429a      	cmp	r2, r3
 800275e:	d0c3      	beq.n	80026e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80027ac:	f023 030c 	bic.w	r3, r3, #12
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	430b      	orrs	r3, r1
 80027b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699a      	ldr	r2, [r3, #24]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a55      	ldr	r2, [pc, #340]	; (800292c <UART_SetConfig+0x1c0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d103      	bne.n	80027e2 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027da:	f7ff fa09 	bl	8001bf0 <HAL_RCC_GetPCLK2Freq>
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	e002      	b.n	80027e8 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027e2:	f7ff f9f1 	bl	8001bc8 <HAL_RCC_GetPCLK1Freq>
 80027e6:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027f0:	d14c      	bne.n	800288c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	009a      	lsls	r2, r3, #2
 80027fc:	441a      	add	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	4a49      	ldr	r2, [pc, #292]	; (8002930 <UART_SetConfig+0x1c4>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	0119      	lsls	r1, r3, #4
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	009a      	lsls	r2, r3, #2
 800281c:	441a      	add	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fbb2 f2f3 	udiv	r2, r2, r3
 8002828:	4b41      	ldr	r3, [pc, #260]	; (8002930 <UART_SetConfig+0x1c4>)
 800282a:	fba3 0302 	umull	r0, r3, r3, r2
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	2064      	movs	r0, #100	; 0x64
 8002832:	fb00 f303 	mul.w	r3, r0, r3
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	3332      	adds	r3, #50	; 0x32
 800283c:	4a3c      	ldr	r2, [pc, #240]	; (8002930 <UART_SetConfig+0x1c4>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800284a:	4419      	add	r1, r3
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	009a      	lsls	r2, r3, #2
 8002856:	441a      	add	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002862:	4b33      	ldr	r3, [pc, #204]	; (8002930 <UART_SetConfig+0x1c4>)
 8002864:	fba3 0302 	umull	r0, r3, r3, r2
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	2064      	movs	r0, #100	; 0x64
 800286c:	fb00 f303 	mul.w	r3, r0, r3
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	3332      	adds	r3, #50	; 0x32
 8002876:	4a2e      	ldr	r2, [pc, #184]	; (8002930 <UART_SetConfig+0x1c4>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	095b      	lsrs	r3, r3, #5
 800287e:	f003 0207 	and.w	r2, r3, #7
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	440a      	add	r2, r1
 8002888:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800288a:	e04a      	b.n	8002922 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	009a      	lsls	r2, r3, #2
 8002896:	441a      	add	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a2:	4a23      	ldr	r2, [pc, #140]	; (8002930 <UART_SetConfig+0x1c4>)
 80028a4:	fba2 2303 	umull	r2, r3, r2, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	0119      	lsls	r1, r3, #4
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	009a      	lsls	r2, r3, #2
 80028b6:	441a      	add	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	fbb2 f2f3 	udiv	r2, r2, r3
 80028c2:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <UART_SetConfig+0x1c4>)
 80028c4:	fba3 0302 	umull	r0, r3, r3, r2
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	2064      	movs	r0, #100	; 0x64
 80028cc:	fb00 f303 	mul.w	r3, r0, r3
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	3332      	adds	r3, #50	; 0x32
 80028d6:	4a16      	ldr	r2, [pc, #88]	; (8002930 <UART_SetConfig+0x1c4>)
 80028d8:	fba2 2303 	umull	r2, r3, r2, r3
 80028dc:	095b      	lsrs	r3, r3, #5
 80028de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e2:	4419      	add	r1, r3
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	009a      	lsls	r2, r3, #2
 80028ee:	441a      	add	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <UART_SetConfig+0x1c4>)
 80028fc:	fba3 0302 	umull	r0, r3, r3, r2
 8002900:	095b      	lsrs	r3, r3, #5
 8002902:	2064      	movs	r0, #100	; 0x64
 8002904:	fb00 f303 	mul.w	r3, r0, r3
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	3332      	adds	r3, #50	; 0x32
 800290e:	4a08      	ldr	r2, [pc, #32]	; (8002930 <UART_SetConfig+0x1c4>)
 8002910:	fba2 2303 	umull	r2, r3, r2, r3
 8002914:	095b      	lsrs	r3, r3, #5
 8002916:	f003 020f 	and.w	r2, r3, #15
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	440a      	add	r2, r1
 8002920:	609a      	str	r2, [r3, #8]
}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40013800 	.word	0x40013800
 8002930:	51eb851f 	.word	0x51eb851f

08002934 <__errno>:
 8002934:	4b01      	ldr	r3, [pc, #4]	; (800293c <__errno+0x8>)
 8002936:	6818      	ldr	r0, [r3, #0]
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	2000000c 	.word	0x2000000c

08002940 <__libc_init_array>:
 8002940:	b570      	push	{r4, r5, r6, lr}
 8002942:	2600      	movs	r6, #0
 8002944:	4d0c      	ldr	r5, [pc, #48]	; (8002978 <__libc_init_array+0x38>)
 8002946:	4c0d      	ldr	r4, [pc, #52]	; (800297c <__libc_init_array+0x3c>)
 8002948:	1b64      	subs	r4, r4, r5
 800294a:	10a4      	asrs	r4, r4, #2
 800294c:	42a6      	cmp	r6, r4
 800294e:	d109      	bne.n	8002964 <__libc_init_array+0x24>
 8002950:	f000 fc9c 	bl	800328c <_init>
 8002954:	2600      	movs	r6, #0
 8002956:	4d0a      	ldr	r5, [pc, #40]	; (8002980 <__libc_init_array+0x40>)
 8002958:	4c0a      	ldr	r4, [pc, #40]	; (8002984 <__libc_init_array+0x44>)
 800295a:	1b64      	subs	r4, r4, r5
 800295c:	10a4      	asrs	r4, r4, #2
 800295e:	42a6      	cmp	r6, r4
 8002960:	d105      	bne.n	800296e <__libc_init_array+0x2e>
 8002962:	bd70      	pop	{r4, r5, r6, pc}
 8002964:	f855 3b04 	ldr.w	r3, [r5], #4
 8002968:	4798      	blx	r3
 800296a:	3601      	adds	r6, #1
 800296c:	e7ee      	b.n	800294c <__libc_init_array+0xc>
 800296e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002972:	4798      	blx	r3
 8002974:	3601      	adds	r6, #1
 8002976:	e7f2      	b.n	800295e <__libc_init_array+0x1e>
 8002978:	08003308 	.word	0x08003308
 800297c:	08003308 	.word	0x08003308
 8002980:	08003308 	.word	0x08003308
 8002984:	0800330c 	.word	0x0800330c

08002988 <memset>:
 8002988:	4603      	mov	r3, r0
 800298a:	4402      	add	r2, r0
 800298c:	4293      	cmp	r3, r2
 800298e:	d100      	bne.n	8002992 <memset+0xa>
 8002990:	4770      	bx	lr
 8002992:	f803 1b01 	strb.w	r1, [r3], #1
 8002996:	e7f9      	b.n	800298c <memset+0x4>

08002998 <siprintf>:
 8002998:	b40e      	push	{r1, r2, r3}
 800299a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800299e:	b500      	push	{lr}
 80029a0:	b09c      	sub	sp, #112	; 0x70
 80029a2:	ab1d      	add	r3, sp, #116	; 0x74
 80029a4:	9002      	str	r0, [sp, #8]
 80029a6:	9006      	str	r0, [sp, #24]
 80029a8:	9107      	str	r1, [sp, #28]
 80029aa:	9104      	str	r1, [sp, #16]
 80029ac:	4808      	ldr	r0, [pc, #32]	; (80029d0 <siprintf+0x38>)
 80029ae:	4909      	ldr	r1, [pc, #36]	; (80029d4 <siprintf+0x3c>)
 80029b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80029b4:	9105      	str	r1, [sp, #20]
 80029b6:	6800      	ldr	r0, [r0, #0]
 80029b8:	a902      	add	r1, sp, #8
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	f000 f868 	bl	8002a90 <_svfiprintf_r>
 80029c0:	2200      	movs	r2, #0
 80029c2:	9b02      	ldr	r3, [sp, #8]
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	b01c      	add	sp, #112	; 0x70
 80029c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80029cc:	b003      	add	sp, #12
 80029ce:	4770      	bx	lr
 80029d0:	2000000c 	.word	0x2000000c
 80029d4:	ffff0208 	.word	0xffff0208

080029d8 <__ssputs_r>:
 80029d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029dc:	688e      	ldr	r6, [r1, #8]
 80029de:	4682      	mov	sl, r0
 80029e0:	429e      	cmp	r6, r3
 80029e2:	460c      	mov	r4, r1
 80029e4:	4690      	mov	r8, r2
 80029e6:	461f      	mov	r7, r3
 80029e8:	d838      	bhi.n	8002a5c <__ssputs_r+0x84>
 80029ea:	898a      	ldrh	r2, [r1, #12]
 80029ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029f0:	d032      	beq.n	8002a58 <__ssputs_r+0x80>
 80029f2:	6825      	ldr	r5, [r4, #0]
 80029f4:	6909      	ldr	r1, [r1, #16]
 80029f6:	3301      	adds	r3, #1
 80029f8:	eba5 0901 	sub.w	r9, r5, r1
 80029fc:	6965      	ldr	r5, [r4, #20]
 80029fe:	444b      	add	r3, r9
 8002a00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a08:	106d      	asrs	r5, r5, #1
 8002a0a:	429d      	cmp	r5, r3
 8002a0c:	bf38      	it	cc
 8002a0e:	461d      	movcc	r5, r3
 8002a10:	0553      	lsls	r3, r2, #21
 8002a12:	d531      	bpl.n	8002a78 <__ssputs_r+0xa0>
 8002a14:	4629      	mov	r1, r5
 8002a16:	f000 fb6f 	bl	80030f8 <_malloc_r>
 8002a1a:	4606      	mov	r6, r0
 8002a1c:	b950      	cbnz	r0, 8002a34 <__ssputs_r+0x5c>
 8002a1e:	230c      	movs	r3, #12
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295
 8002a24:	f8ca 3000 	str.w	r3, [sl]
 8002a28:	89a3      	ldrh	r3, [r4, #12]
 8002a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a2e:	81a3      	strh	r3, [r4, #12]
 8002a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a34:	464a      	mov	r2, r9
 8002a36:	6921      	ldr	r1, [r4, #16]
 8002a38:	f000 face 	bl	8002fd8 <memcpy>
 8002a3c:	89a3      	ldrh	r3, [r4, #12]
 8002a3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a46:	81a3      	strh	r3, [r4, #12]
 8002a48:	6126      	str	r6, [r4, #16]
 8002a4a:	444e      	add	r6, r9
 8002a4c:	6026      	str	r6, [r4, #0]
 8002a4e:	463e      	mov	r6, r7
 8002a50:	6165      	str	r5, [r4, #20]
 8002a52:	eba5 0509 	sub.w	r5, r5, r9
 8002a56:	60a5      	str	r5, [r4, #8]
 8002a58:	42be      	cmp	r6, r7
 8002a5a:	d900      	bls.n	8002a5e <__ssputs_r+0x86>
 8002a5c:	463e      	mov	r6, r7
 8002a5e:	4632      	mov	r2, r6
 8002a60:	4641      	mov	r1, r8
 8002a62:	6820      	ldr	r0, [r4, #0]
 8002a64:	f000 fac6 	bl	8002ff4 <memmove>
 8002a68:	68a3      	ldr	r3, [r4, #8]
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	1b9b      	subs	r3, r3, r6
 8002a6e:	60a3      	str	r3, [r4, #8]
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	4433      	add	r3, r6
 8002a74:	6023      	str	r3, [r4, #0]
 8002a76:	e7db      	b.n	8002a30 <__ssputs_r+0x58>
 8002a78:	462a      	mov	r2, r5
 8002a7a:	f000 fbb1 	bl	80031e0 <_realloc_r>
 8002a7e:	4606      	mov	r6, r0
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d1e1      	bne.n	8002a48 <__ssputs_r+0x70>
 8002a84:	4650      	mov	r0, sl
 8002a86:	6921      	ldr	r1, [r4, #16]
 8002a88:	f000 face 	bl	8003028 <_free_r>
 8002a8c:	e7c7      	b.n	8002a1e <__ssputs_r+0x46>
	...

08002a90 <_svfiprintf_r>:
 8002a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a94:	4698      	mov	r8, r3
 8002a96:	898b      	ldrh	r3, [r1, #12]
 8002a98:	4607      	mov	r7, r0
 8002a9a:	061b      	lsls	r3, r3, #24
 8002a9c:	460d      	mov	r5, r1
 8002a9e:	4614      	mov	r4, r2
 8002aa0:	b09d      	sub	sp, #116	; 0x74
 8002aa2:	d50e      	bpl.n	8002ac2 <_svfiprintf_r+0x32>
 8002aa4:	690b      	ldr	r3, [r1, #16]
 8002aa6:	b963      	cbnz	r3, 8002ac2 <_svfiprintf_r+0x32>
 8002aa8:	2140      	movs	r1, #64	; 0x40
 8002aaa:	f000 fb25 	bl	80030f8 <_malloc_r>
 8002aae:	6028      	str	r0, [r5, #0]
 8002ab0:	6128      	str	r0, [r5, #16]
 8002ab2:	b920      	cbnz	r0, 8002abe <_svfiprintf_r+0x2e>
 8002ab4:	230c      	movs	r3, #12
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8002abc:	e0d1      	b.n	8002c62 <_svfiprintf_r+0x1d2>
 8002abe:	2340      	movs	r3, #64	; 0x40
 8002ac0:	616b      	str	r3, [r5, #20]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ac6:	2320      	movs	r3, #32
 8002ac8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002acc:	2330      	movs	r3, #48	; 0x30
 8002ace:	f04f 0901 	mov.w	r9, #1
 8002ad2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ad6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002c7c <_svfiprintf_r+0x1ec>
 8002ada:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ade:	4623      	mov	r3, r4
 8002ae0:	469a      	mov	sl, r3
 8002ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ae6:	b10a      	cbz	r2, 8002aec <_svfiprintf_r+0x5c>
 8002ae8:	2a25      	cmp	r2, #37	; 0x25
 8002aea:	d1f9      	bne.n	8002ae0 <_svfiprintf_r+0x50>
 8002aec:	ebba 0b04 	subs.w	fp, sl, r4
 8002af0:	d00b      	beq.n	8002b0a <_svfiprintf_r+0x7a>
 8002af2:	465b      	mov	r3, fp
 8002af4:	4622      	mov	r2, r4
 8002af6:	4629      	mov	r1, r5
 8002af8:	4638      	mov	r0, r7
 8002afa:	f7ff ff6d 	bl	80029d8 <__ssputs_r>
 8002afe:	3001      	adds	r0, #1
 8002b00:	f000 80aa 	beq.w	8002c58 <_svfiprintf_r+0x1c8>
 8002b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b06:	445a      	add	r2, fp
 8002b08:	9209      	str	r2, [sp, #36]	; 0x24
 8002b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 80a2 	beq.w	8002c58 <_svfiprintf_r+0x1c8>
 8002b14:	2300      	movs	r3, #0
 8002b16:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b1e:	f10a 0a01 	add.w	sl, sl, #1
 8002b22:	9304      	str	r3, [sp, #16]
 8002b24:	9307      	str	r3, [sp, #28]
 8002b26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b2a:	931a      	str	r3, [sp, #104]	; 0x68
 8002b2c:	4654      	mov	r4, sl
 8002b2e:	2205      	movs	r2, #5
 8002b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b34:	4851      	ldr	r0, [pc, #324]	; (8002c7c <_svfiprintf_r+0x1ec>)
 8002b36:	f000 fa41 	bl	8002fbc <memchr>
 8002b3a:	9a04      	ldr	r2, [sp, #16]
 8002b3c:	b9d8      	cbnz	r0, 8002b76 <_svfiprintf_r+0xe6>
 8002b3e:	06d0      	lsls	r0, r2, #27
 8002b40:	bf44      	itt	mi
 8002b42:	2320      	movmi	r3, #32
 8002b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b48:	0711      	lsls	r1, r2, #28
 8002b4a:	bf44      	itt	mi
 8002b4c:	232b      	movmi	r3, #43	; 0x2b
 8002b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b52:	f89a 3000 	ldrb.w	r3, [sl]
 8002b56:	2b2a      	cmp	r3, #42	; 0x2a
 8002b58:	d015      	beq.n	8002b86 <_svfiprintf_r+0xf6>
 8002b5a:	4654      	mov	r4, sl
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f04f 0c0a 	mov.w	ip, #10
 8002b62:	9a07      	ldr	r2, [sp, #28]
 8002b64:	4621      	mov	r1, r4
 8002b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b6a:	3b30      	subs	r3, #48	; 0x30
 8002b6c:	2b09      	cmp	r3, #9
 8002b6e:	d94e      	bls.n	8002c0e <_svfiprintf_r+0x17e>
 8002b70:	b1b0      	cbz	r0, 8002ba0 <_svfiprintf_r+0x110>
 8002b72:	9207      	str	r2, [sp, #28]
 8002b74:	e014      	b.n	8002ba0 <_svfiprintf_r+0x110>
 8002b76:	eba0 0308 	sub.w	r3, r0, r8
 8002b7a:	fa09 f303 	lsl.w	r3, r9, r3
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	46a2      	mov	sl, r4
 8002b82:	9304      	str	r3, [sp, #16]
 8002b84:	e7d2      	b.n	8002b2c <_svfiprintf_r+0x9c>
 8002b86:	9b03      	ldr	r3, [sp, #12]
 8002b88:	1d19      	adds	r1, r3, #4
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	9103      	str	r1, [sp, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bfbb      	ittet	lt
 8002b92:	425b      	neglt	r3, r3
 8002b94:	f042 0202 	orrlt.w	r2, r2, #2
 8002b98:	9307      	strge	r3, [sp, #28]
 8002b9a:	9307      	strlt	r3, [sp, #28]
 8002b9c:	bfb8      	it	lt
 8002b9e:	9204      	strlt	r2, [sp, #16]
 8002ba0:	7823      	ldrb	r3, [r4, #0]
 8002ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8002ba4:	d10c      	bne.n	8002bc0 <_svfiprintf_r+0x130>
 8002ba6:	7863      	ldrb	r3, [r4, #1]
 8002ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8002baa:	d135      	bne.n	8002c18 <_svfiprintf_r+0x188>
 8002bac:	9b03      	ldr	r3, [sp, #12]
 8002bae:	3402      	adds	r4, #2
 8002bb0:	1d1a      	adds	r2, r3, #4
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	9203      	str	r2, [sp, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	bfb8      	it	lt
 8002bba:	f04f 33ff 	movlt.w	r3, #4294967295
 8002bbe:	9305      	str	r3, [sp, #20]
 8002bc0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002c80 <_svfiprintf_r+0x1f0>
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	4650      	mov	r0, sl
 8002bc8:	7821      	ldrb	r1, [r4, #0]
 8002bca:	f000 f9f7 	bl	8002fbc <memchr>
 8002bce:	b140      	cbz	r0, 8002be2 <_svfiprintf_r+0x152>
 8002bd0:	2340      	movs	r3, #64	; 0x40
 8002bd2:	eba0 000a 	sub.w	r0, r0, sl
 8002bd6:	fa03 f000 	lsl.w	r0, r3, r0
 8002bda:	9b04      	ldr	r3, [sp, #16]
 8002bdc:	3401      	adds	r4, #1
 8002bde:	4303      	orrs	r3, r0
 8002be0:	9304      	str	r3, [sp, #16]
 8002be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002be6:	2206      	movs	r2, #6
 8002be8:	4826      	ldr	r0, [pc, #152]	; (8002c84 <_svfiprintf_r+0x1f4>)
 8002bea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bee:	f000 f9e5 	bl	8002fbc <memchr>
 8002bf2:	2800      	cmp	r0, #0
 8002bf4:	d038      	beq.n	8002c68 <_svfiprintf_r+0x1d8>
 8002bf6:	4b24      	ldr	r3, [pc, #144]	; (8002c88 <_svfiprintf_r+0x1f8>)
 8002bf8:	bb1b      	cbnz	r3, 8002c42 <_svfiprintf_r+0x1b2>
 8002bfa:	9b03      	ldr	r3, [sp, #12]
 8002bfc:	3307      	adds	r3, #7
 8002bfe:	f023 0307 	bic.w	r3, r3, #7
 8002c02:	3308      	adds	r3, #8
 8002c04:	9303      	str	r3, [sp, #12]
 8002c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c08:	4433      	add	r3, r6
 8002c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8002c0c:	e767      	b.n	8002ade <_svfiprintf_r+0x4e>
 8002c0e:	460c      	mov	r4, r1
 8002c10:	2001      	movs	r0, #1
 8002c12:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c16:	e7a5      	b.n	8002b64 <_svfiprintf_r+0xd4>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f04f 0c0a 	mov.w	ip, #10
 8002c1e:	4619      	mov	r1, r3
 8002c20:	3401      	adds	r4, #1
 8002c22:	9305      	str	r3, [sp, #20]
 8002c24:	4620      	mov	r0, r4
 8002c26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c2a:	3a30      	subs	r2, #48	; 0x30
 8002c2c:	2a09      	cmp	r2, #9
 8002c2e:	d903      	bls.n	8002c38 <_svfiprintf_r+0x1a8>
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0c5      	beq.n	8002bc0 <_svfiprintf_r+0x130>
 8002c34:	9105      	str	r1, [sp, #20]
 8002c36:	e7c3      	b.n	8002bc0 <_svfiprintf_r+0x130>
 8002c38:	4604      	mov	r4, r0
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c40:	e7f0      	b.n	8002c24 <_svfiprintf_r+0x194>
 8002c42:	ab03      	add	r3, sp, #12
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	462a      	mov	r2, r5
 8002c48:	4638      	mov	r0, r7
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <_svfiprintf_r+0x1fc>)
 8002c4c:	a904      	add	r1, sp, #16
 8002c4e:	f3af 8000 	nop.w
 8002c52:	1c42      	adds	r2, r0, #1
 8002c54:	4606      	mov	r6, r0
 8002c56:	d1d6      	bne.n	8002c06 <_svfiprintf_r+0x176>
 8002c58:	89ab      	ldrh	r3, [r5, #12]
 8002c5a:	065b      	lsls	r3, r3, #25
 8002c5c:	f53f af2c 	bmi.w	8002ab8 <_svfiprintf_r+0x28>
 8002c60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c62:	b01d      	add	sp, #116	; 0x74
 8002c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c68:	ab03      	add	r3, sp, #12
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	462a      	mov	r2, r5
 8002c6e:	4638      	mov	r0, r7
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <_svfiprintf_r+0x1fc>)
 8002c72:	a904      	add	r1, sp, #16
 8002c74:	f000 f87c 	bl	8002d70 <_printf_i>
 8002c78:	e7eb      	b.n	8002c52 <_svfiprintf_r+0x1c2>
 8002c7a:	bf00      	nop
 8002c7c:	080032cc 	.word	0x080032cc
 8002c80:	080032d2 	.word	0x080032d2
 8002c84:	080032d6 	.word	0x080032d6
 8002c88:	00000000 	.word	0x00000000
 8002c8c:	080029d9 	.word	0x080029d9

08002c90 <_printf_common>:
 8002c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c94:	4616      	mov	r6, r2
 8002c96:	4699      	mov	r9, r3
 8002c98:	688a      	ldr	r2, [r1, #8]
 8002c9a:	690b      	ldr	r3, [r1, #16]
 8002c9c:	4607      	mov	r7, r0
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	bfb8      	it	lt
 8002ca2:	4613      	movlt	r3, r2
 8002ca4:	6033      	str	r3, [r6, #0]
 8002ca6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002caa:	460c      	mov	r4, r1
 8002cac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cb0:	b10a      	cbz	r2, 8002cb6 <_printf_common+0x26>
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	6033      	str	r3, [r6, #0]
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	0699      	lsls	r1, r3, #26
 8002cba:	bf42      	ittt	mi
 8002cbc:	6833      	ldrmi	r3, [r6, #0]
 8002cbe:	3302      	addmi	r3, #2
 8002cc0:	6033      	strmi	r3, [r6, #0]
 8002cc2:	6825      	ldr	r5, [r4, #0]
 8002cc4:	f015 0506 	ands.w	r5, r5, #6
 8002cc8:	d106      	bne.n	8002cd8 <_printf_common+0x48>
 8002cca:	f104 0a19 	add.w	sl, r4, #25
 8002cce:	68e3      	ldr	r3, [r4, #12]
 8002cd0:	6832      	ldr	r2, [r6, #0]
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	42ab      	cmp	r3, r5
 8002cd6:	dc28      	bgt.n	8002d2a <_printf_common+0x9a>
 8002cd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002cdc:	1e13      	subs	r3, r2, #0
 8002cde:	6822      	ldr	r2, [r4, #0]
 8002ce0:	bf18      	it	ne
 8002ce2:	2301      	movne	r3, #1
 8002ce4:	0692      	lsls	r2, r2, #26
 8002ce6:	d42d      	bmi.n	8002d44 <_printf_common+0xb4>
 8002ce8:	4649      	mov	r1, r9
 8002cea:	4638      	mov	r0, r7
 8002cec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cf0:	47c0      	blx	r8
 8002cf2:	3001      	adds	r0, #1
 8002cf4:	d020      	beq.n	8002d38 <_printf_common+0xa8>
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	68e5      	ldr	r5, [r4, #12]
 8002cfa:	f003 0306 	and.w	r3, r3, #6
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	bf18      	it	ne
 8002d02:	2500      	movne	r5, #0
 8002d04:	6832      	ldr	r2, [r6, #0]
 8002d06:	f04f 0600 	mov.w	r6, #0
 8002d0a:	68a3      	ldr	r3, [r4, #8]
 8002d0c:	bf08      	it	eq
 8002d0e:	1aad      	subeq	r5, r5, r2
 8002d10:	6922      	ldr	r2, [r4, #16]
 8002d12:	bf08      	it	eq
 8002d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	bfc4      	itt	gt
 8002d1c:	1a9b      	subgt	r3, r3, r2
 8002d1e:	18ed      	addgt	r5, r5, r3
 8002d20:	341a      	adds	r4, #26
 8002d22:	42b5      	cmp	r5, r6
 8002d24:	d11a      	bne.n	8002d5c <_printf_common+0xcc>
 8002d26:	2000      	movs	r0, #0
 8002d28:	e008      	b.n	8002d3c <_printf_common+0xac>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	4652      	mov	r2, sl
 8002d2e:	4649      	mov	r1, r9
 8002d30:	4638      	mov	r0, r7
 8002d32:	47c0      	blx	r8
 8002d34:	3001      	adds	r0, #1
 8002d36:	d103      	bne.n	8002d40 <_printf_common+0xb0>
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d40:	3501      	adds	r5, #1
 8002d42:	e7c4      	b.n	8002cce <_printf_common+0x3e>
 8002d44:	2030      	movs	r0, #48	; 0x30
 8002d46:	18e1      	adds	r1, r4, r3
 8002d48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d52:	4422      	add	r2, r4
 8002d54:	3302      	adds	r3, #2
 8002d56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d5a:	e7c5      	b.n	8002ce8 <_printf_common+0x58>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	4622      	mov	r2, r4
 8002d60:	4649      	mov	r1, r9
 8002d62:	4638      	mov	r0, r7
 8002d64:	47c0      	blx	r8
 8002d66:	3001      	adds	r0, #1
 8002d68:	d0e6      	beq.n	8002d38 <_printf_common+0xa8>
 8002d6a:	3601      	adds	r6, #1
 8002d6c:	e7d9      	b.n	8002d22 <_printf_common+0x92>
	...

08002d70 <_printf_i>:
 8002d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d74:	7e0f      	ldrb	r7, [r1, #24]
 8002d76:	4691      	mov	r9, r2
 8002d78:	2f78      	cmp	r7, #120	; 0x78
 8002d7a:	4680      	mov	r8, r0
 8002d7c:	460c      	mov	r4, r1
 8002d7e:	469a      	mov	sl, r3
 8002d80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d86:	d807      	bhi.n	8002d98 <_printf_i+0x28>
 8002d88:	2f62      	cmp	r7, #98	; 0x62
 8002d8a:	d80a      	bhi.n	8002da2 <_printf_i+0x32>
 8002d8c:	2f00      	cmp	r7, #0
 8002d8e:	f000 80d9 	beq.w	8002f44 <_printf_i+0x1d4>
 8002d92:	2f58      	cmp	r7, #88	; 0x58
 8002d94:	f000 80a4 	beq.w	8002ee0 <_printf_i+0x170>
 8002d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002da0:	e03a      	b.n	8002e18 <_printf_i+0xa8>
 8002da2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002da6:	2b15      	cmp	r3, #21
 8002da8:	d8f6      	bhi.n	8002d98 <_printf_i+0x28>
 8002daa:	a101      	add	r1, pc, #4	; (adr r1, 8002db0 <_printf_i+0x40>)
 8002dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002db0:	08002e09 	.word	0x08002e09
 8002db4:	08002e1d 	.word	0x08002e1d
 8002db8:	08002d99 	.word	0x08002d99
 8002dbc:	08002d99 	.word	0x08002d99
 8002dc0:	08002d99 	.word	0x08002d99
 8002dc4:	08002d99 	.word	0x08002d99
 8002dc8:	08002e1d 	.word	0x08002e1d
 8002dcc:	08002d99 	.word	0x08002d99
 8002dd0:	08002d99 	.word	0x08002d99
 8002dd4:	08002d99 	.word	0x08002d99
 8002dd8:	08002d99 	.word	0x08002d99
 8002ddc:	08002f2b 	.word	0x08002f2b
 8002de0:	08002e4d 	.word	0x08002e4d
 8002de4:	08002f0d 	.word	0x08002f0d
 8002de8:	08002d99 	.word	0x08002d99
 8002dec:	08002d99 	.word	0x08002d99
 8002df0:	08002f4d 	.word	0x08002f4d
 8002df4:	08002d99 	.word	0x08002d99
 8002df8:	08002e4d 	.word	0x08002e4d
 8002dfc:	08002d99 	.word	0x08002d99
 8002e00:	08002d99 	.word	0x08002d99
 8002e04:	08002f15 	.word	0x08002f15
 8002e08:	682b      	ldr	r3, [r5, #0]
 8002e0a:	1d1a      	adds	r2, r3, #4
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	602a      	str	r2, [r5, #0]
 8002e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0a4      	b.n	8002f66 <_printf_i+0x1f6>
 8002e1c:	6820      	ldr	r0, [r4, #0]
 8002e1e:	6829      	ldr	r1, [r5, #0]
 8002e20:	0606      	lsls	r6, r0, #24
 8002e22:	f101 0304 	add.w	r3, r1, #4
 8002e26:	d50a      	bpl.n	8002e3e <_printf_i+0xce>
 8002e28:	680e      	ldr	r6, [r1, #0]
 8002e2a:	602b      	str	r3, [r5, #0]
 8002e2c:	2e00      	cmp	r6, #0
 8002e2e:	da03      	bge.n	8002e38 <_printf_i+0xc8>
 8002e30:	232d      	movs	r3, #45	; 0x2d
 8002e32:	4276      	negs	r6, r6
 8002e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e38:	230a      	movs	r3, #10
 8002e3a:	485e      	ldr	r0, [pc, #376]	; (8002fb4 <_printf_i+0x244>)
 8002e3c:	e019      	b.n	8002e72 <_printf_i+0x102>
 8002e3e:	680e      	ldr	r6, [r1, #0]
 8002e40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e44:	602b      	str	r3, [r5, #0]
 8002e46:	bf18      	it	ne
 8002e48:	b236      	sxthne	r6, r6
 8002e4a:	e7ef      	b.n	8002e2c <_printf_i+0xbc>
 8002e4c:	682b      	ldr	r3, [r5, #0]
 8002e4e:	6820      	ldr	r0, [r4, #0]
 8002e50:	1d19      	adds	r1, r3, #4
 8002e52:	6029      	str	r1, [r5, #0]
 8002e54:	0601      	lsls	r1, r0, #24
 8002e56:	d501      	bpl.n	8002e5c <_printf_i+0xec>
 8002e58:	681e      	ldr	r6, [r3, #0]
 8002e5a:	e002      	b.n	8002e62 <_printf_i+0xf2>
 8002e5c:	0646      	lsls	r6, r0, #25
 8002e5e:	d5fb      	bpl.n	8002e58 <_printf_i+0xe8>
 8002e60:	881e      	ldrh	r6, [r3, #0]
 8002e62:	2f6f      	cmp	r7, #111	; 0x6f
 8002e64:	bf0c      	ite	eq
 8002e66:	2308      	moveq	r3, #8
 8002e68:	230a      	movne	r3, #10
 8002e6a:	4852      	ldr	r0, [pc, #328]	; (8002fb4 <_printf_i+0x244>)
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e72:	6865      	ldr	r5, [r4, #4]
 8002e74:	2d00      	cmp	r5, #0
 8002e76:	bfa8      	it	ge
 8002e78:	6821      	ldrge	r1, [r4, #0]
 8002e7a:	60a5      	str	r5, [r4, #8]
 8002e7c:	bfa4      	itt	ge
 8002e7e:	f021 0104 	bicge.w	r1, r1, #4
 8002e82:	6021      	strge	r1, [r4, #0]
 8002e84:	b90e      	cbnz	r6, 8002e8a <_printf_i+0x11a>
 8002e86:	2d00      	cmp	r5, #0
 8002e88:	d04d      	beq.n	8002f26 <_printf_i+0x1b6>
 8002e8a:	4615      	mov	r5, r2
 8002e8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e90:	fb03 6711 	mls	r7, r3, r1, r6
 8002e94:	5dc7      	ldrb	r7, [r0, r7]
 8002e96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e9a:	4637      	mov	r7, r6
 8002e9c:	42bb      	cmp	r3, r7
 8002e9e:	460e      	mov	r6, r1
 8002ea0:	d9f4      	bls.n	8002e8c <_printf_i+0x11c>
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d10b      	bne.n	8002ebe <_printf_i+0x14e>
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	07de      	lsls	r6, r3, #31
 8002eaa:	d508      	bpl.n	8002ebe <_printf_i+0x14e>
 8002eac:	6923      	ldr	r3, [r4, #16]
 8002eae:	6861      	ldr	r1, [r4, #4]
 8002eb0:	4299      	cmp	r1, r3
 8002eb2:	bfde      	ittt	le
 8002eb4:	2330      	movle	r3, #48	; 0x30
 8002eb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002eba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ebe:	1b52      	subs	r2, r2, r5
 8002ec0:	6122      	str	r2, [r4, #16]
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	4621      	mov	r1, r4
 8002ec6:	4640      	mov	r0, r8
 8002ec8:	f8cd a000 	str.w	sl, [sp]
 8002ecc:	aa03      	add	r2, sp, #12
 8002ece:	f7ff fedf 	bl	8002c90 <_printf_common>
 8002ed2:	3001      	adds	r0, #1
 8002ed4:	d14c      	bne.n	8002f70 <_printf_i+0x200>
 8002ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eda:	b004      	add	sp, #16
 8002edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ee0:	4834      	ldr	r0, [pc, #208]	; (8002fb4 <_printf_i+0x244>)
 8002ee2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002ee6:	6829      	ldr	r1, [r5, #0]
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	f851 6b04 	ldr.w	r6, [r1], #4
 8002eee:	6029      	str	r1, [r5, #0]
 8002ef0:	061d      	lsls	r5, r3, #24
 8002ef2:	d514      	bpl.n	8002f1e <_printf_i+0x1ae>
 8002ef4:	07df      	lsls	r7, r3, #31
 8002ef6:	bf44      	itt	mi
 8002ef8:	f043 0320 	orrmi.w	r3, r3, #32
 8002efc:	6023      	strmi	r3, [r4, #0]
 8002efe:	b91e      	cbnz	r6, 8002f08 <_printf_i+0x198>
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	f023 0320 	bic.w	r3, r3, #32
 8002f06:	6023      	str	r3, [r4, #0]
 8002f08:	2310      	movs	r3, #16
 8002f0a:	e7af      	b.n	8002e6c <_printf_i+0xfc>
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	f043 0320 	orr.w	r3, r3, #32
 8002f12:	6023      	str	r3, [r4, #0]
 8002f14:	2378      	movs	r3, #120	; 0x78
 8002f16:	4828      	ldr	r0, [pc, #160]	; (8002fb8 <_printf_i+0x248>)
 8002f18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f1c:	e7e3      	b.n	8002ee6 <_printf_i+0x176>
 8002f1e:	0659      	lsls	r1, r3, #25
 8002f20:	bf48      	it	mi
 8002f22:	b2b6      	uxthmi	r6, r6
 8002f24:	e7e6      	b.n	8002ef4 <_printf_i+0x184>
 8002f26:	4615      	mov	r5, r2
 8002f28:	e7bb      	b.n	8002ea2 <_printf_i+0x132>
 8002f2a:	682b      	ldr	r3, [r5, #0]
 8002f2c:	6826      	ldr	r6, [r4, #0]
 8002f2e:	1d18      	adds	r0, r3, #4
 8002f30:	6961      	ldr	r1, [r4, #20]
 8002f32:	6028      	str	r0, [r5, #0]
 8002f34:	0635      	lsls	r5, r6, #24
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	d501      	bpl.n	8002f3e <_printf_i+0x1ce>
 8002f3a:	6019      	str	r1, [r3, #0]
 8002f3c:	e002      	b.n	8002f44 <_printf_i+0x1d4>
 8002f3e:	0670      	lsls	r0, r6, #25
 8002f40:	d5fb      	bpl.n	8002f3a <_printf_i+0x1ca>
 8002f42:	8019      	strh	r1, [r3, #0]
 8002f44:	2300      	movs	r3, #0
 8002f46:	4615      	mov	r5, r2
 8002f48:	6123      	str	r3, [r4, #16]
 8002f4a:	e7ba      	b.n	8002ec2 <_printf_i+0x152>
 8002f4c:	682b      	ldr	r3, [r5, #0]
 8002f4e:	2100      	movs	r1, #0
 8002f50:	1d1a      	adds	r2, r3, #4
 8002f52:	602a      	str	r2, [r5, #0]
 8002f54:	681d      	ldr	r5, [r3, #0]
 8002f56:	6862      	ldr	r2, [r4, #4]
 8002f58:	4628      	mov	r0, r5
 8002f5a:	f000 f82f 	bl	8002fbc <memchr>
 8002f5e:	b108      	cbz	r0, 8002f64 <_printf_i+0x1f4>
 8002f60:	1b40      	subs	r0, r0, r5
 8002f62:	6060      	str	r0, [r4, #4]
 8002f64:	6863      	ldr	r3, [r4, #4]
 8002f66:	6123      	str	r3, [r4, #16]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f6e:	e7a8      	b.n	8002ec2 <_printf_i+0x152>
 8002f70:	462a      	mov	r2, r5
 8002f72:	4649      	mov	r1, r9
 8002f74:	4640      	mov	r0, r8
 8002f76:	6923      	ldr	r3, [r4, #16]
 8002f78:	47d0      	blx	sl
 8002f7a:	3001      	adds	r0, #1
 8002f7c:	d0ab      	beq.n	8002ed6 <_printf_i+0x166>
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	079b      	lsls	r3, r3, #30
 8002f82:	d413      	bmi.n	8002fac <_printf_i+0x23c>
 8002f84:	68e0      	ldr	r0, [r4, #12]
 8002f86:	9b03      	ldr	r3, [sp, #12]
 8002f88:	4298      	cmp	r0, r3
 8002f8a:	bfb8      	it	lt
 8002f8c:	4618      	movlt	r0, r3
 8002f8e:	e7a4      	b.n	8002eda <_printf_i+0x16a>
 8002f90:	2301      	movs	r3, #1
 8002f92:	4632      	mov	r2, r6
 8002f94:	4649      	mov	r1, r9
 8002f96:	4640      	mov	r0, r8
 8002f98:	47d0      	blx	sl
 8002f9a:	3001      	adds	r0, #1
 8002f9c:	d09b      	beq.n	8002ed6 <_printf_i+0x166>
 8002f9e:	3501      	adds	r5, #1
 8002fa0:	68e3      	ldr	r3, [r4, #12]
 8002fa2:	9903      	ldr	r1, [sp, #12]
 8002fa4:	1a5b      	subs	r3, r3, r1
 8002fa6:	42ab      	cmp	r3, r5
 8002fa8:	dcf2      	bgt.n	8002f90 <_printf_i+0x220>
 8002faa:	e7eb      	b.n	8002f84 <_printf_i+0x214>
 8002fac:	2500      	movs	r5, #0
 8002fae:	f104 0619 	add.w	r6, r4, #25
 8002fb2:	e7f5      	b.n	8002fa0 <_printf_i+0x230>
 8002fb4:	080032dd 	.word	0x080032dd
 8002fb8:	080032ee 	.word	0x080032ee

08002fbc <memchr>:
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	b510      	push	{r4, lr}
 8002fc0:	b2c9      	uxtb	r1, r1
 8002fc2:	4402      	add	r2, r0
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	d101      	bne.n	8002fce <memchr+0x12>
 8002fca:	2000      	movs	r0, #0
 8002fcc:	e003      	b.n	8002fd6 <memchr+0x1a>
 8002fce:	7804      	ldrb	r4, [r0, #0]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	428c      	cmp	r4, r1
 8002fd4:	d1f6      	bne.n	8002fc4 <memchr+0x8>
 8002fd6:	bd10      	pop	{r4, pc}

08002fd8 <memcpy>:
 8002fd8:	440a      	add	r2, r1
 8002fda:	4291      	cmp	r1, r2
 8002fdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002fe0:	d100      	bne.n	8002fe4 <memcpy+0xc>
 8002fe2:	4770      	bx	lr
 8002fe4:	b510      	push	{r4, lr}
 8002fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fea:	4291      	cmp	r1, r2
 8002fec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ff0:	d1f9      	bne.n	8002fe6 <memcpy+0xe>
 8002ff2:	bd10      	pop	{r4, pc}

08002ff4 <memmove>:
 8002ff4:	4288      	cmp	r0, r1
 8002ff6:	b510      	push	{r4, lr}
 8002ff8:	eb01 0402 	add.w	r4, r1, r2
 8002ffc:	d902      	bls.n	8003004 <memmove+0x10>
 8002ffe:	4284      	cmp	r4, r0
 8003000:	4623      	mov	r3, r4
 8003002:	d807      	bhi.n	8003014 <memmove+0x20>
 8003004:	1e43      	subs	r3, r0, #1
 8003006:	42a1      	cmp	r1, r4
 8003008:	d008      	beq.n	800301c <memmove+0x28>
 800300a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800300e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003012:	e7f8      	b.n	8003006 <memmove+0x12>
 8003014:	4601      	mov	r1, r0
 8003016:	4402      	add	r2, r0
 8003018:	428a      	cmp	r2, r1
 800301a:	d100      	bne.n	800301e <memmove+0x2a>
 800301c:	bd10      	pop	{r4, pc}
 800301e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003026:	e7f7      	b.n	8003018 <memmove+0x24>

08003028 <_free_r>:
 8003028:	b538      	push	{r3, r4, r5, lr}
 800302a:	4605      	mov	r5, r0
 800302c:	2900      	cmp	r1, #0
 800302e:	d040      	beq.n	80030b2 <_free_r+0x8a>
 8003030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003034:	1f0c      	subs	r4, r1, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	bfb8      	it	lt
 800303a:	18e4      	addlt	r4, r4, r3
 800303c:	f000 f910 	bl	8003260 <__malloc_lock>
 8003040:	4a1c      	ldr	r2, [pc, #112]	; (80030b4 <_free_r+0x8c>)
 8003042:	6813      	ldr	r3, [r2, #0]
 8003044:	b933      	cbnz	r3, 8003054 <_free_r+0x2c>
 8003046:	6063      	str	r3, [r4, #4]
 8003048:	6014      	str	r4, [r2, #0]
 800304a:	4628      	mov	r0, r5
 800304c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003050:	f000 b90c 	b.w	800326c <__malloc_unlock>
 8003054:	42a3      	cmp	r3, r4
 8003056:	d908      	bls.n	800306a <_free_r+0x42>
 8003058:	6820      	ldr	r0, [r4, #0]
 800305a:	1821      	adds	r1, r4, r0
 800305c:	428b      	cmp	r3, r1
 800305e:	bf01      	itttt	eq
 8003060:	6819      	ldreq	r1, [r3, #0]
 8003062:	685b      	ldreq	r3, [r3, #4]
 8003064:	1809      	addeq	r1, r1, r0
 8003066:	6021      	streq	r1, [r4, #0]
 8003068:	e7ed      	b.n	8003046 <_free_r+0x1e>
 800306a:	461a      	mov	r2, r3
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	b10b      	cbz	r3, 8003074 <_free_r+0x4c>
 8003070:	42a3      	cmp	r3, r4
 8003072:	d9fa      	bls.n	800306a <_free_r+0x42>
 8003074:	6811      	ldr	r1, [r2, #0]
 8003076:	1850      	adds	r0, r2, r1
 8003078:	42a0      	cmp	r0, r4
 800307a:	d10b      	bne.n	8003094 <_free_r+0x6c>
 800307c:	6820      	ldr	r0, [r4, #0]
 800307e:	4401      	add	r1, r0
 8003080:	1850      	adds	r0, r2, r1
 8003082:	4283      	cmp	r3, r0
 8003084:	6011      	str	r1, [r2, #0]
 8003086:	d1e0      	bne.n	800304a <_free_r+0x22>
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4401      	add	r1, r0
 800308e:	6011      	str	r1, [r2, #0]
 8003090:	6053      	str	r3, [r2, #4]
 8003092:	e7da      	b.n	800304a <_free_r+0x22>
 8003094:	d902      	bls.n	800309c <_free_r+0x74>
 8003096:	230c      	movs	r3, #12
 8003098:	602b      	str	r3, [r5, #0]
 800309a:	e7d6      	b.n	800304a <_free_r+0x22>
 800309c:	6820      	ldr	r0, [r4, #0]
 800309e:	1821      	adds	r1, r4, r0
 80030a0:	428b      	cmp	r3, r1
 80030a2:	bf01      	itttt	eq
 80030a4:	6819      	ldreq	r1, [r3, #0]
 80030a6:	685b      	ldreq	r3, [r3, #4]
 80030a8:	1809      	addeq	r1, r1, r0
 80030aa:	6021      	streq	r1, [r4, #0]
 80030ac:	6063      	str	r3, [r4, #4]
 80030ae:	6054      	str	r4, [r2, #4]
 80030b0:	e7cb      	b.n	800304a <_free_r+0x22>
 80030b2:	bd38      	pop	{r3, r4, r5, pc}
 80030b4:	200002c0 	.word	0x200002c0

080030b8 <sbrk_aligned>:
 80030b8:	b570      	push	{r4, r5, r6, lr}
 80030ba:	4e0e      	ldr	r6, [pc, #56]	; (80030f4 <sbrk_aligned+0x3c>)
 80030bc:	460c      	mov	r4, r1
 80030be:	6831      	ldr	r1, [r6, #0]
 80030c0:	4605      	mov	r5, r0
 80030c2:	b911      	cbnz	r1, 80030ca <sbrk_aligned+0x12>
 80030c4:	f000 f8bc 	bl	8003240 <_sbrk_r>
 80030c8:	6030      	str	r0, [r6, #0]
 80030ca:	4621      	mov	r1, r4
 80030cc:	4628      	mov	r0, r5
 80030ce:	f000 f8b7 	bl	8003240 <_sbrk_r>
 80030d2:	1c43      	adds	r3, r0, #1
 80030d4:	d00a      	beq.n	80030ec <sbrk_aligned+0x34>
 80030d6:	1cc4      	adds	r4, r0, #3
 80030d8:	f024 0403 	bic.w	r4, r4, #3
 80030dc:	42a0      	cmp	r0, r4
 80030de:	d007      	beq.n	80030f0 <sbrk_aligned+0x38>
 80030e0:	1a21      	subs	r1, r4, r0
 80030e2:	4628      	mov	r0, r5
 80030e4:	f000 f8ac 	bl	8003240 <_sbrk_r>
 80030e8:	3001      	adds	r0, #1
 80030ea:	d101      	bne.n	80030f0 <sbrk_aligned+0x38>
 80030ec:	f04f 34ff 	mov.w	r4, #4294967295
 80030f0:	4620      	mov	r0, r4
 80030f2:	bd70      	pop	{r4, r5, r6, pc}
 80030f4:	200002c4 	.word	0x200002c4

080030f8 <_malloc_r>:
 80030f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030fc:	1ccd      	adds	r5, r1, #3
 80030fe:	f025 0503 	bic.w	r5, r5, #3
 8003102:	3508      	adds	r5, #8
 8003104:	2d0c      	cmp	r5, #12
 8003106:	bf38      	it	cc
 8003108:	250c      	movcc	r5, #12
 800310a:	2d00      	cmp	r5, #0
 800310c:	4607      	mov	r7, r0
 800310e:	db01      	blt.n	8003114 <_malloc_r+0x1c>
 8003110:	42a9      	cmp	r1, r5
 8003112:	d905      	bls.n	8003120 <_malloc_r+0x28>
 8003114:	230c      	movs	r3, #12
 8003116:	2600      	movs	r6, #0
 8003118:	603b      	str	r3, [r7, #0]
 800311a:	4630      	mov	r0, r6
 800311c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003120:	4e2e      	ldr	r6, [pc, #184]	; (80031dc <_malloc_r+0xe4>)
 8003122:	f000 f89d 	bl	8003260 <__malloc_lock>
 8003126:	6833      	ldr	r3, [r6, #0]
 8003128:	461c      	mov	r4, r3
 800312a:	bb34      	cbnz	r4, 800317a <_malloc_r+0x82>
 800312c:	4629      	mov	r1, r5
 800312e:	4638      	mov	r0, r7
 8003130:	f7ff ffc2 	bl	80030b8 <sbrk_aligned>
 8003134:	1c43      	adds	r3, r0, #1
 8003136:	4604      	mov	r4, r0
 8003138:	d14d      	bne.n	80031d6 <_malloc_r+0xde>
 800313a:	6834      	ldr	r4, [r6, #0]
 800313c:	4626      	mov	r6, r4
 800313e:	2e00      	cmp	r6, #0
 8003140:	d140      	bne.n	80031c4 <_malloc_r+0xcc>
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	4631      	mov	r1, r6
 8003146:	4638      	mov	r0, r7
 8003148:	eb04 0803 	add.w	r8, r4, r3
 800314c:	f000 f878 	bl	8003240 <_sbrk_r>
 8003150:	4580      	cmp	r8, r0
 8003152:	d13a      	bne.n	80031ca <_malloc_r+0xd2>
 8003154:	6821      	ldr	r1, [r4, #0]
 8003156:	3503      	adds	r5, #3
 8003158:	1a6d      	subs	r5, r5, r1
 800315a:	f025 0503 	bic.w	r5, r5, #3
 800315e:	3508      	adds	r5, #8
 8003160:	2d0c      	cmp	r5, #12
 8003162:	bf38      	it	cc
 8003164:	250c      	movcc	r5, #12
 8003166:	4638      	mov	r0, r7
 8003168:	4629      	mov	r1, r5
 800316a:	f7ff ffa5 	bl	80030b8 <sbrk_aligned>
 800316e:	3001      	adds	r0, #1
 8003170:	d02b      	beq.n	80031ca <_malloc_r+0xd2>
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	442b      	add	r3, r5
 8003176:	6023      	str	r3, [r4, #0]
 8003178:	e00e      	b.n	8003198 <_malloc_r+0xa0>
 800317a:	6822      	ldr	r2, [r4, #0]
 800317c:	1b52      	subs	r2, r2, r5
 800317e:	d41e      	bmi.n	80031be <_malloc_r+0xc6>
 8003180:	2a0b      	cmp	r2, #11
 8003182:	d916      	bls.n	80031b2 <_malloc_r+0xba>
 8003184:	1961      	adds	r1, r4, r5
 8003186:	42a3      	cmp	r3, r4
 8003188:	6025      	str	r5, [r4, #0]
 800318a:	bf18      	it	ne
 800318c:	6059      	strne	r1, [r3, #4]
 800318e:	6863      	ldr	r3, [r4, #4]
 8003190:	bf08      	it	eq
 8003192:	6031      	streq	r1, [r6, #0]
 8003194:	5162      	str	r2, [r4, r5]
 8003196:	604b      	str	r3, [r1, #4]
 8003198:	4638      	mov	r0, r7
 800319a:	f104 060b 	add.w	r6, r4, #11
 800319e:	f000 f865 	bl	800326c <__malloc_unlock>
 80031a2:	f026 0607 	bic.w	r6, r6, #7
 80031a6:	1d23      	adds	r3, r4, #4
 80031a8:	1af2      	subs	r2, r6, r3
 80031aa:	d0b6      	beq.n	800311a <_malloc_r+0x22>
 80031ac:	1b9b      	subs	r3, r3, r6
 80031ae:	50a3      	str	r3, [r4, r2]
 80031b0:	e7b3      	b.n	800311a <_malloc_r+0x22>
 80031b2:	6862      	ldr	r2, [r4, #4]
 80031b4:	42a3      	cmp	r3, r4
 80031b6:	bf0c      	ite	eq
 80031b8:	6032      	streq	r2, [r6, #0]
 80031ba:	605a      	strne	r2, [r3, #4]
 80031bc:	e7ec      	b.n	8003198 <_malloc_r+0xa0>
 80031be:	4623      	mov	r3, r4
 80031c0:	6864      	ldr	r4, [r4, #4]
 80031c2:	e7b2      	b.n	800312a <_malloc_r+0x32>
 80031c4:	4634      	mov	r4, r6
 80031c6:	6876      	ldr	r6, [r6, #4]
 80031c8:	e7b9      	b.n	800313e <_malloc_r+0x46>
 80031ca:	230c      	movs	r3, #12
 80031cc:	4638      	mov	r0, r7
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	f000 f84c 	bl	800326c <__malloc_unlock>
 80031d4:	e7a1      	b.n	800311a <_malloc_r+0x22>
 80031d6:	6025      	str	r5, [r4, #0]
 80031d8:	e7de      	b.n	8003198 <_malloc_r+0xa0>
 80031da:	bf00      	nop
 80031dc:	200002c0 	.word	0x200002c0

080031e0 <_realloc_r>:
 80031e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031e4:	4680      	mov	r8, r0
 80031e6:	4614      	mov	r4, r2
 80031e8:	460e      	mov	r6, r1
 80031ea:	b921      	cbnz	r1, 80031f6 <_realloc_r+0x16>
 80031ec:	4611      	mov	r1, r2
 80031ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031f2:	f7ff bf81 	b.w	80030f8 <_malloc_r>
 80031f6:	b92a      	cbnz	r2, 8003204 <_realloc_r+0x24>
 80031f8:	f7ff ff16 	bl	8003028 <_free_r>
 80031fc:	4625      	mov	r5, r4
 80031fe:	4628      	mov	r0, r5
 8003200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003204:	f000 f838 	bl	8003278 <_malloc_usable_size_r>
 8003208:	4284      	cmp	r4, r0
 800320a:	4607      	mov	r7, r0
 800320c:	d802      	bhi.n	8003214 <_realloc_r+0x34>
 800320e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003212:	d812      	bhi.n	800323a <_realloc_r+0x5a>
 8003214:	4621      	mov	r1, r4
 8003216:	4640      	mov	r0, r8
 8003218:	f7ff ff6e 	bl	80030f8 <_malloc_r>
 800321c:	4605      	mov	r5, r0
 800321e:	2800      	cmp	r0, #0
 8003220:	d0ed      	beq.n	80031fe <_realloc_r+0x1e>
 8003222:	42bc      	cmp	r4, r7
 8003224:	4622      	mov	r2, r4
 8003226:	4631      	mov	r1, r6
 8003228:	bf28      	it	cs
 800322a:	463a      	movcs	r2, r7
 800322c:	f7ff fed4 	bl	8002fd8 <memcpy>
 8003230:	4631      	mov	r1, r6
 8003232:	4640      	mov	r0, r8
 8003234:	f7ff fef8 	bl	8003028 <_free_r>
 8003238:	e7e1      	b.n	80031fe <_realloc_r+0x1e>
 800323a:	4635      	mov	r5, r6
 800323c:	e7df      	b.n	80031fe <_realloc_r+0x1e>
	...

08003240 <_sbrk_r>:
 8003240:	b538      	push	{r3, r4, r5, lr}
 8003242:	2300      	movs	r3, #0
 8003244:	4d05      	ldr	r5, [pc, #20]	; (800325c <_sbrk_r+0x1c>)
 8003246:	4604      	mov	r4, r0
 8003248:	4608      	mov	r0, r1
 800324a:	602b      	str	r3, [r5, #0]
 800324c:	f7fd fb88 	bl	8000960 <_sbrk>
 8003250:	1c43      	adds	r3, r0, #1
 8003252:	d102      	bne.n	800325a <_sbrk_r+0x1a>
 8003254:	682b      	ldr	r3, [r5, #0]
 8003256:	b103      	cbz	r3, 800325a <_sbrk_r+0x1a>
 8003258:	6023      	str	r3, [r4, #0]
 800325a:	bd38      	pop	{r3, r4, r5, pc}
 800325c:	200002c8 	.word	0x200002c8

08003260 <__malloc_lock>:
 8003260:	4801      	ldr	r0, [pc, #4]	; (8003268 <__malloc_lock+0x8>)
 8003262:	f000 b811 	b.w	8003288 <__retarget_lock_acquire_recursive>
 8003266:	bf00      	nop
 8003268:	200002cc 	.word	0x200002cc

0800326c <__malloc_unlock>:
 800326c:	4801      	ldr	r0, [pc, #4]	; (8003274 <__malloc_unlock+0x8>)
 800326e:	f000 b80c 	b.w	800328a <__retarget_lock_release_recursive>
 8003272:	bf00      	nop
 8003274:	200002cc 	.word	0x200002cc

08003278 <_malloc_usable_size_r>:
 8003278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800327c:	1f18      	subs	r0, r3, #4
 800327e:	2b00      	cmp	r3, #0
 8003280:	bfbc      	itt	lt
 8003282:	580b      	ldrlt	r3, [r1, r0]
 8003284:	18c0      	addlt	r0, r0, r3
 8003286:	4770      	bx	lr

08003288 <__retarget_lock_acquire_recursive>:
 8003288:	4770      	bx	lr

0800328a <__retarget_lock_release_recursive>:
 800328a:	4770      	bx	lr

0800328c <_init>:
 800328c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328e:	bf00      	nop
 8003290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003292:	bc08      	pop	{r3}
 8003294:	469e      	mov	lr, r3
 8003296:	4770      	bx	lr

08003298 <_fini>:
 8003298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329a:	bf00      	nop
 800329c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329e:	bc08      	pop	{r3}
 80032a0:	469e      	mov	lr, r3
 80032a2:	4770      	bx	lr
